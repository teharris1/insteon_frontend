"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkinsteon_panel_frontend"] = self["webpackChunkinsteon_panel_frontend"] || []).push([["vendors-node_modules_event-target-shim_index_mjs"],{

/***/ "./node_modules/event-target-shim/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/event-target-shim/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Event\": () => (/* binding */ Event),\n/* harmony export */   \"EventTarget\": () => (/* binding */ EventTarget),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"defineCustomEventTarget\": () => (/* binding */ defineCustomEventTarget),\n/* harmony export */   \"defineEventAttribute\": () => (/* binding */ defineEventAttribute),\n/* harmony export */   \"getEventAttributeValue\": () => (/* binding */ getEventAttributeValue),\n/* harmony export */   \"setErrorHandler\": () => (/* binding */ setErrorHandler),\n/* harmony export */   \"setEventAttributeValue\": () => (/* binding */ setEventAttributeValue),\n/* harmony export */   \"setWarningHandler\": () => (/* binding */ setWarningHandler)\n/* harmony export */ });\n/**\n * Assert a condition.\n * @param condition The condition that it should satisfy.\n * @param message The error message.\n * @param args The arguments for replacing placeholders in the message.\n */\nfunction assertType(condition, message, ...args) {\n  if (!condition) {\n    throw new TypeError(format(message, args));\n  }\n}\n/**\n * Convert a text and arguments to one string.\n * @param message The formating text\n * @param args The arguments.\n */\nfunction format(message, args) {\n  let i = 0;\n  return message.replace(/%[os]/gu, () => anyToString(args[i++]));\n}\n/**\n * Convert a value to a string representation.\n * @param x The value to get the string representation.\n */\nfunction anyToString(x) {\n  if (typeof x !== \"object\" || x === null) {\n    return String(x);\n  }\n  return Object.prototype.toString.call(x);\n}\nlet currentErrorHandler;\n/**\n * Set the error handler.\n * @param value The error handler to set.\n */\nfunction setErrorHandler(value) {\n  assertType(typeof value === \"function\" || value === undefined, \"The error handler must be a function or undefined, but got %o.\", value);\n  currentErrorHandler = value;\n}\n/**\n * Print a error message.\n * @param maybeError The error object.\n */\nfunction reportError(maybeError) {\n  try {\n    const error = maybeError instanceof Error ? maybeError : new Error(anyToString(maybeError));\n    // Call the user-defined error handler if exists.\n    if (currentErrorHandler) {\n      currentErrorHandler(error);\n      return;\n    }\n    // Dispatch an `error` event if this is on a browser.\n    if (typeof dispatchEvent === \"function\" && typeof ErrorEvent === \"function\") {\n      dispatchEvent(new ErrorEvent(\"error\", {\n        error,\n        message: error.message\n      }));\n    }\n    // Emit an `uncaughtException` event if this is on Node.js.\n    //istanbul ignore else\n    else if (typeof process !== \"undefined\" && typeof process.emit === \"function\") {\n      process.emit(\"uncaughtException\", error);\n      return;\n    }\n    // Otherwise, print the error.\n    console.error(error);\n  } catch (_a) {\n    // ignore.\n  }\n}\n\n/**\n * The global object.\n */\n//istanbul ignore next\nconst Global = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : typeof globalThis !== \"undefined\" ? globalThis : undefined;\nlet currentWarnHandler;\n/**\n * Set the warning handler.\n * @param value The warning handler to set.\n */\nfunction setWarningHandler(value) {\n  assertType(typeof value === \"function\" || value === undefined, \"The warning handler must be a function or undefined, but got %o.\", value);\n  currentWarnHandler = value;\n}\n/**\n * The warning information.\n */\nclass Warning {\n  constructor(code, message) {\n    this.code = code;\n    this.message = message;\n  }\n  /**\n   * Report this warning.\n   * @param args The arguments of the warning.\n   */\n  warn(...args) {\n    var _a;\n    try {\n      // Call the user-defined warning handler if exists.\n      if (currentWarnHandler) {\n        currentWarnHandler({\n          ...this,\n          args\n        });\n        return;\n      }\n      // Otherwise, print the warning.\n      const stack = ((_a = new Error().stack) !== null && _a !== void 0 ? _a : \"\").replace(/^(?:.+?\\n){2}/gu, \"\\n\");\n      console.warn(this.message, ...args, stack);\n    } catch (_b) {\n      // Ignore.\n    }\n  }\n}\nconst InitEventWasCalledWhileDispatching = new Warning(\"W01\", \"Unable to initialize event under dispatching.\");\nconst FalsyWasAssignedToCancelBubble = new Warning(\"W02\", \"Assigning any falsy value to 'cancelBubble' property has no effect.\");\nconst TruthyWasAssignedToReturnValue = new Warning(\"W03\", \"Assigning any truthy value to 'returnValue' property has no effect.\");\nconst NonCancelableEventWasCanceled = new Warning(\"W04\", \"Unable to preventDefault on non-cancelable events.\");\nconst CanceledInPassiveListener = new Warning(\"W05\", \"Unable to preventDefault inside passive event listener invocation.\");\nconst EventListenerWasDuplicated = new Warning(\"W06\", \"An event listener wasn't added because it has been added already: %o, %o\");\nconst OptionWasIgnored = new Warning(\"W07\", \"The %o option value was abandoned because the event listener wasn't added as duplicated.\");\nconst InvalidEventListener = new Warning(\"W08\", \"The 'callback' argument must be a function or an object that has 'handleEvent' method: %o\");\nconst InvalidAttributeHandler = new Warning(\"W09\", \"Event attribute handler must be a function: %o\");\n\n/*eslint-disable class-methods-use-this */\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * `EventTarget` shim can control the internal state of this `Event` objects.\n * @see https://dom.spec.whatwg.org/#event\n */\nclass Event {\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-none\n   */\n  static get NONE() {\n    return NONE;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n   */\n  static get CAPTURING_PHASE() {\n    return CAPTURING_PHASE;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-at_target\n   */\n  static get AT_TARGET() {\n    return AT_TARGET;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n   */\n  static get BUBBLING_PHASE() {\n    return BUBBLING_PHASE;\n  }\n  /**\n   * Initialize this event instance.\n   * @param type The type of this event.\n   * @param eventInitDict Options to initialize.\n   * @see https://dom.spec.whatwg.org/#dom-event-event\n   */\n  constructor(type, eventInitDict) {\n    Object.defineProperty(this, \"isTrusted\", {\n      value: false,\n      enumerable: true\n    });\n    const opts = eventInitDict !== null && eventInitDict !== void 0 ? eventInitDict : {};\n    internalDataMap.set(this, {\n      type: String(type),\n      bubbles: Boolean(opts.bubbles),\n      cancelable: Boolean(opts.cancelable),\n      composed: Boolean(opts.composed),\n      target: null,\n      currentTarget: null,\n      stopPropagationFlag: false,\n      stopImmediatePropagationFlag: false,\n      canceledFlag: false,\n      inPassiveListenerFlag: false,\n      dispatchFlag: false,\n      timeStamp: Date.now()\n    });\n  }\n  /**\n   * The type of this event.\n   * @see https://dom.spec.whatwg.org/#dom-event-type\n   */\n  get type() {\n    return $(this).type;\n  }\n  /**\n   * The event target of the current dispatching.\n   * @see https://dom.spec.whatwg.org/#dom-event-target\n   */\n  get target() {\n    return $(this).target;\n  }\n  /**\n   * The event target of the current dispatching.\n   * @deprecated Use the `target` property instead.\n   * @see https://dom.spec.whatwg.org/#dom-event-srcelement\n   */\n  get srcElement() {\n    return $(this).target;\n  }\n  /**\n   * The event target of the current dispatching.\n   * @see https://dom.spec.whatwg.org/#dom-event-currenttarget\n   */\n  get currentTarget() {\n    return $(this).currentTarget;\n  }\n  /**\n   * The event target of the current dispatching.\n   * This doesn't support node tree.\n   * @see https://dom.spec.whatwg.org/#dom-event-composedpath\n   */\n  composedPath() {\n    const currentTarget = $(this).currentTarget;\n    if (currentTarget) {\n      return [currentTarget];\n    }\n    return [];\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-none\n   */\n  get NONE() {\n    return NONE;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-capturing_phase\n   */\n  get CAPTURING_PHASE() {\n    return CAPTURING_PHASE;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-at_target\n   */\n  get AT_TARGET() {\n    return AT_TARGET;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-bubbling_phase\n   */\n  get BUBBLING_PHASE() {\n    return BUBBLING_PHASE;\n  }\n  /**\n   * The current event phase.\n   * @see https://dom.spec.whatwg.org/#dom-event-eventphase\n   */\n  get eventPhase() {\n    return $(this).dispatchFlag ? 2 : 0;\n  }\n  /**\n   * Stop event bubbling.\n   * Because this shim doesn't support node tree, this merely changes the `cancelBubble` property value.\n   * @see https://dom.spec.whatwg.org/#dom-event-stoppropagation\n   */\n  stopPropagation() {\n    $(this).stopPropagationFlag = true;\n  }\n  /**\n   * `true` if event bubbling was stopped.\n   * @deprecated\n   * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n   */\n  get cancelBubble() {\n    return $(this).stopPropagationFlag;\n  }\n  /**\n   * Stop event bubbling if `true` is set.\n   * @deprecated Use the `stopPropagation()` method instead.\n   * @see https://dom.spec.whatwg.org/#dom-event-cancelbubble\n   */\n  set cancelBubble(value) {\n    if (value) {\n      $(this).stopPropagationFlag = true;\n    } else {\n      FalsyWasAssignedToCancelBubble.warn();\n    }\n  }\n  /**\n   * Stop event bubbling and subsequent event listener callings.\n   * @see https://dom.spec.whatwg.org/#dom-event-stopimmediatepropagation\n   */\n  stopImmediatePropagation() {\n    const data = $(this);\n    data.stopPropagationFlag = data.stopImmediatePropagationFlag = true;\n  }\n  /**\n   * `true` if this event will bubble.\n   * @see https://dom.spec.whatwg.org/#dom-event-bubbles\n   */\n  get bubbles() {\n    return $(this).bubbles;\n  }\n  /**\n   * `true` if this event can be canceled by the `preventDefault()` method.\n   * @see https://dom.spec.whatwg.org/#dom-event-cancelable\n   */\n  get cancelable() {\n    return $(this).cancelable;\n  }\n  /**\n   * `true` if the default behavior will act.\n   * @deprecated Use the `defaultPrevented` proeprty instead.\n   * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n   */\n  get returnValue() {\n    return !$(this).canceledFlag;\n  }\n  /**\n   * Cancel the default behavior if `false` is set.\n   * @deprecated Use the `preventDefault()` method instead.\n   * @see https://dom.spec.whatwg.org/#dom-event-returnvalue\n   */\n  set returnValue(value) {\n    if (!value) {\n      setCancelFlag($(this));\n    } else {\n      TruthyWasAssignedToReturnValue.warn();\n    }\n  }\n  /**\n   * Cancel the default behavior.\n   * @see https://dom.spec.whatwg.org/#dom-event-preventdefault\n   */\n  preventDefault() {\n    setCancelFlag($(this));\n  }\n  /**\n   * `true` if the default behavior was canceled.\n   * @see https://dom.spec.whatwg.org/#dom-event-defaultprevented\n   */\n  get defaultPrevented() {\n    return $(this).canceledFlag;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-composed\n   */\n  get composed() {\n    return $(this).composed;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-istrusted\n   */\n  //istanbul ignore next\n  get isTrusted() {\n    return false;\n  }\n  /**\n   * @see https://dom.spec.whatwg.org/#dom-event-timestamp\n   */\n  get timeStamp() {\n    return $(this).timeStamp;\n  }\n  /**\n   * @deprecated Don't use this method. The constructor did initialization.\n   */\n  initEvent(type, bubbles = false, cancelable = false) {\n    const data = $(this);\n    if (data.dispatchFlag) {\n      InitEventWasCalledWhileDispatching.warn();\n      return;\n    }\n    internalDataMap.set(this, {\n      ...data,\n      type: String(type),\n      bubbles: Boolean(bubbles),\n      cancelable: Boolean(cancelable),\n      target: null,\n      currentTarget: null,\n      stopPropagationFlag: false,\n      stopImmediatePropagationFlag: false,\n      canceledFlag: false\n    });\n  }\n}\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nconst NONE = 0;\nconst CAPTURING_PHASE = 1;\nconst AT_TARGET = 2;\nconst BUBBLING_PHASE = 3;\n/**\n * Private data for event wrappers.\n */\nconst internalDataMap = new WeakMap();\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\nfunction $(event, name = \"this\") {\n  const retv = internalDataMap.get(event);\n  assertType(retv != null, \"'%s' must be an object that Event constructor created, but got another one: %o\", name, event);\n  return retv;\n}\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data private data.\n */\nfunction setCancelFlag(data) {\n  if (data.inPassiveListenerFlag) {\n    CanceledInPassiveListener.warn();\n    return;\n  }\n  if (!data.cancelable) {\n    NonCancelableEventWasCanceled.warn();\n    return;\n  }\n  data.canceledFlag = true;\n}\n// Set enumerable\nObject.defineProperty(Event, \"NONE\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"CAPTURING_PHASE\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"AT_TARGET\", {\n  enumerable: true\n});\nObject.defineProperty(Event, \"BUBBLING_PHASE\", {\n  enumerable: true\n});\nconst keys = Object.getOwnPropertyNames(Event.prototype);\nfor (let i = 0; i < keys.length; ++i) {\n  if (keys[i] === \"constructor\") {\n    continue;\n  }\n  Object.defineProperty(Event.prototype, keys[i], {\n    enumerable: true\n  });\n}\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n  Object.setPrototypeOf(Event.prototype, Global.Event.prototype);\n}\n\n/**\n * Create a new InvalidStateError instance.\n * @param message The error message.\n */\nfunction createInvalidStateError(message) {\n  if (Global.DOMException) {\n    return new Global.DOMException(message, \"InvalidStateError\");\n  }\n  if (DOMException == null) {\n    DOMException = class DOMException extends Error {\n      constructor(msg) {\n        super(msg);\n        if (Error.captureStackTrace) {\n          Error.captureStackTrace(this, DOMException);\n        }\n      }\n      // eslint-disable-next-line class-methods-use-this\n      get code() {\n        return 11;\n      }\n      // eslint-disable-next-line class-methods-use-this\n      get name() {\n        return \"InvalidStateError\";\n      }\n    };\n    Object.defineProperties(DOMException.prototype, {\n      code: {\n        enumerable: true\n      },\n      name: {\n        enumerable: true\n      }\n    });\n    defineErrorCodeProperties(DOMException);\n    defineErrorCodeProperties(DOMException.prototype);\n  }\n  return new DOMException(message);\n}\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\nlet DOMException;\nconst ErrorCodeMap = {\n  INDEX_SIZE_ERR: 1,\n  DOMSTRING_SIZE_ERR: 2,\n  HIERARCHY_REQUEST_ERR: 3,\n  WRONG_DOCUMENT_ERR: 4,\n  INVALID_CHARACTER_ERR: 5,\n  NO_DATA_ALLOWED_ERR: 6,\n  NO_MODIFICATION_ALLOWED_ERR: 7,\n  NOT_FOUND_ERR: 8,\n  NOT_SUPPORTED_ERR: 9,\n  INUSE_ATTRIBUTE_ERR: 10,\n  INVALID_STATE_ERR: 11,\n  SYNTAX_ERR: 12,\n  INVALID_MODIFICATION_ERR: 13,\n  NAMESPACE_ERR: 14,\n  INVALID_ACCESS_ERR: 15,\n  VALIDATION_ERR: 16,\n  TYPE_MISMATCH_ERR: 17,\n  SECURITY_ERR: 18,\n  NETWORK_ERR: 19,\n  ABORT_ERR: 20,\n  URL_MISMATCH_ERR: 21,\n  QUOTA_EXCEEDED_ERR: 22,\n  TIMEOUT_ERR: 23,\n  INVALID_NODE_TYPE_ERR: 24,\n  DATA_CLONE_ERR: 25\n};\nfunction defineErrorCodeProperties(obj) {\n  const keys = Object.keys(ErrorCodeMap);\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    const value = ErrorCodeMap[key];\n    Object.defineProperty(obj, key, {\n      get() {\n        return value;\n      },\n      configurable: true,\n      enumerable: true\n    });\n  }\n}\n\n/**\n * An implementation of `Event` interface, that wraps a given event object.\n * This class controls the internal state of `Event`.\n * @see https://dom.spec.whatwg.org/#interface-event\n */\nclass EventWrapper extends Event {\n  /**\n   * Wrap a given event object to control states.\n   * @param event The event-like object to wrap.\n   */\n  static wrap(event) {\n    return new (getWrapperClassOf(event))(event);\n  }\n  constructor(event) {\n    super(event.type, {\n      bubbles: event.bubbles,\n      cancelable: event.cancelable,\n      composed: event.composed\n    });\n    if (event.cancelBubble) {\n      super.stopPropagation();\n    }\n    if (event.defaultPrevented) {\n      super.preventDefault();\n    }\n    internalDataMap$1.set(this, {\n      original: event\n    });\n    // Define accessors\n    const keys = Object.keys(event);\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i];\n      if (!(key in this)) {\n        Object.defineProperty(this, key, defineRedirectDescriptor(event, key));\n      }\n    }\n  }\n  stopPropagation() {\n    super.stopPropagation();\n    const {\n      original\n    } = $$1(this);\n    if (\"stopPropagation\" in original) {\n      original.stopPropagation();\n    }\n  }\n  get cancelBubble() {\n    return super.cancelBubble;\n  }\n  set cancelBubble(value) {\n    super.cancelBubble = value;\n    const {\n      original\n    } = $$1(this);\n    if (\"cancelBubble\" in original) {\n      original.cancelBubble = value;\n    }\n  }\n  stopImmediatePropagation() {\n    super.stopImmediatePropagation();\n    const {\n      original\n    } = $$1(this);\n    if (\"stopImmediatePropagation\" in original) {\n      original.stopImmediatePropagation();\n    }\n  }\n  get returnValue() {\n    return super.returnValue;\n  }\n  set returnValue(value) {\n    super.returnValue = value;\n    const {\n      original\n    } = $$1(this);\n    if (\"returnValue\" in original) {\n      original.returnValue = value;\n    }\n  }\n  preventDefault() {\n    super.preventDefault();\n    const {\n      original\n    } = $$1(this);\n    if (\"preventDefault\" in original) {\n      original.preventDefault();\n    }\n  }\n  get timeStamp() {\n    const {\n      original\n    } = $$1(this);\n    if (\"timeStamp\" in original) {\n      return original.timeStamp;\n    }\n    return super.timeStamp;\n  }\n}\n/**\n * Private data for event wrappers.\n */\nconst internalDataMap$1 = new WeakMap();\n/**\n * Get private data.\n * @param event The event object to get private data.\n * @returns The private data of the event.\n */\nfunction $$1(event) {\n  const retv = internalDataMap$1.get(event);\n  assertType(retv != null, \"'this' is expected an Event object, but got\", event);\n  return retv;\n}\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrapperClassCache = new WeakMap();\n// Make association for wrappers.\nwrapperClassCache.set(Object.prototype, EventWrapper);\nif (typeof Global !== \"undefined\" && typeof Global.Event !== \"undefined\") {\n  wrapperClassCache.set(Global.Event.prototype, EventWrapper);\n}\n/**\n * Get the wrapper class of a given prototype.\n * @param originalEvent The event object to wrap.\n */\nfunction getWrapperClassOf(originalEvent) {\n  const prototype = Object.getPrototypeOf(originalEvent);\n  if (prototype == null) {\n    return EventWrapper;\n  }\n  let wrapper = wrapperClassCache.get(prototype);\n  if (wrapper == null) {\n    wrapper = defineWrapper(getWrapperClassOf(prototype), prototype);\n    wrapperClassCache.set(prototype, wrapper);\n  }\n  return wrapper;\n}\n/**\n * Define new wrapper class.\n * @param BaseEventWrapper The base wrapper class.\n * @param originalPrototype The prototype of the original event.\n */\nfunction defineWrapper(BaseEventWrapper, originalPrototype) {\n  class CustomEventWrapper extends BaseEventWrapper {}\n  const keys = Object.keys(originalPrototype);\n  for (let i = 0; i < keys.length; ++i) {\n    Object.defineProperty(CustomEventWrapper.prototype, keys[i], defineRedirectDescriptor(originalPrototype, keys[i]));\n  }\n  return CustomEventWrapper;\n}\n/**\n * Get the property descriptor to redirect a given property.\n */\nfunction defineRedirectDescriptor(obj, key) {\n  const d = Object.getOwnPropertyDescriptor(obj, key);\n  return {\n    get() {\n      const original = $$1(this).original;\n      const value = original[key];\n      if (typeof value === \"function\") {\n        return value.bind(original);\n      }\n      return value;\n    },\n    set(value) {\n      const original = $$1(this).original;\n      original[key] = value;\n    },\n    configurable: d.configurable,\n    enumerable: d.enumerable\n  };\n}\n\n/**\n * Create a new listener.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n * @param signalListener The abort event listener for the abort signal.\n */\nfunction createListener(callback, capture, passive, once, signal, signalListener) {\n  return {\n    callback,\n    flags: (capture ? 1 /* Capture */ : 0) | (passive ? 2 /* Passive */ : 0) | (once ? 4 /* Once */ : 0),\n    signal,\n    signalListener\n  };\n}\n/**\n * Set the `removed` flag to the given listener.\n * @param listener The listener to check.\n */\nfunction setRemoved(listener) {\n  listener.flags |= 8 /* Removed */;\n}\n/**\n * Check if the given listener has the `capture` flag or not.\n * @param listener The listener to check.\n */\nfunction isCapture(listener) {\n  return (listener.flags & 1 /* Capture */) === 1 /* Capture */;\n}\n/**\n * Check if the given listener has the `passive` flag or not.\n * @param listener The listener to check.\n */\nfunction isPassive(listener) {\n  return (listener.flags & 2 /* Passive */) === 2 /* Passive */;\n}\n/**\n * Check if the given listener has the `once` flag or not.\n * @param listener The listener to check.\n */\nfunction isOnce(listener) {\n  return (listener.flags & 4 /* Once */) === 4 /* Once */;\n}\n/**\n * Check if the given listener has the `removed` flag or not.\n * @param listener The listener to check.\n */\nfunction isRemoved(listener) {\n  return (listener.flags & 8 /* Removed */) === 8 /* Removed */;\n}\n/**\n * Call an event listener.\n * @param listener The listener to call.\n * @param target The event target object for `thisArg`.\n * @param event The event object for the first argument.\n * @param attribute `true` if this callback is an event attribute handler.\n */\nfunction invokeCallback({\n  callback\n}, target, event) {\n  try {\n    if (typeof callback === \"function\") {\n      callback.call(target, event);\n    } else if (typeof callback.handleEvent === \"function\") {\n      callback.handleEvent(event);\n    }\n  } catch (thrownError) {\n    reportError(thrownError);\n  }\n}\n\n/**\n * Find the index of given listener.\n * This returns `-1` if not found.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n */\nfunction findIndexOfListener({\n  listeners\n}, callback, capture) {\n  for (let i = 0; i < listeners.length; ++i) {\n    if (listeners[i].callback === callback && isCapture(listeners[i]) === capture) {\n      return i;\n    }\n  }\n  return -1;\n}\n/**\n * Add the given listener.\n * Does copy-on-write if needed.\n * @param list The listener list.\n * @param callback The callback function.\n * @param capture The capture flag.\n * @param passive The passive flag.\n * @param once The once flag.\n * @param signal The abort signal.\n */\nfunction addListener(list, callback, capture, passive, once, signal) {\n  let signalListener;\n  if (signal) {\n    signalListener = removeListener.bind(null, list, callback, capture);\n    signal.addEventListener(\"abort\", signalListener);\n  }\n  const listener = createListener(callback, capture, passive, once, signal, signalListener);\n  if (list.cow) {\n    list.cow = false;\n    list.listeners = [...list.listeners, listener];\n  } else {\n    list.listeners.push(listener);\n  }\n  return listener;\n}\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param callback The callback function to find.\n * @param capture The capture flag to find.\n * @returns `true` if it mutated the list directly.\n */\nfunction removeListener(list, callback, capture) {\n  const index = findIndexOfListener(list, callback, capture);\n  if (index !== -1) {\n    return removeListenerAt(list, index);\n  }\n  return false;\n}\n/**\n * Remove a listener.\n * @param list The listener list.\n * @param index The index of the target listener.\n * @param disableCow Disable copy-on-write if true.\n * @returns `true` if it mutated the `listeners` array directly.\n */\nfunction removeListenerAt(list, index, disableCow = false) {\n  const listener = list.listeners[index];\n  // Set the removed flag.\n  setRemoved(listener);\n  // Dispose the abort signal listener if exists.\n  if (listener.signal) {\n    listener.signal.removeEventListener(\"abort\", listener.signalListener);\n  }\n  // Remove it from the array.\n  if (list.cow && !disableCow) {\n    list.cow = false;\n    list.listeners = list.listeners.filter((_, i) => i !== index);\n    return false;\n  }\n  list.listeners.splice(index, 1);\n  return true;\n}\n\n/**\n * Create a new `ListenerListMap` object.\n */\nfunction createListenerListMap() {\n  return Object.create(null);\n}\n/**\n * Get the listener list of the given type.\n * If the listener list has not been initialized, initialize and return it.\n * @param listenerMap The listener list map.\n * @param type The event type to get.\n */\nfunction ensureListenerList(listenerMap, type) {\n  var _a;\n  return (_a = listenerMap[type]) !== null && _a !== void 0 ? _a : listenerMap[type] = {\n    attrCallback: undefined,\n    attrListener: undefined,\n    cow: false,\n    listeners: []\n  };\n}\n\n/**\n * An implementation of the `EventTarget` interface.\n * @see https://dom.spec.whatwg.org/#eventtarget\n */\nclass EventTarget {\n  /**\n   * Initialize this instance.\n   */\n  constructor() {\n    internalDataMap$2.set(this, createListenerListMap());\n  }\n  // Implementation\n  addEventListener(type0, callback0, options0) {\n    const listenerMap = $$2(this);\n    const {\n      callback,\n      capture,\n      once,\n      passive,\n      signal,\n      type\n    } = normalizeAddOptions(type0, callback0, options0);\n    if (callback == null || (signal === null || signal === void 0 ? void 0 : signal.aborted)) {\n      return;\n    }\n    const list = ensureListenerList(listenerMap, type);\n    // Find existing listener.\n    const i = findIndexOfListener(list, callback, capture);\n    if (i !== -1) {\n      warnDuplicate(list.listeners[i], passive, once, signal);\n      return;\n    }\n    // Add the new listener.\n    addListener(list, callback, capture, passive, once, signal);\n  }\n  // Implementation\n  removeEventListener(type0, callback0, options0) {\n    const listenerMap = $$2(this);\n    const {\n      callback,\n      capture,\n      type\n    } = normalizeOptions(type0, callback0, options0);\n    const list = listenerMap[type];\n    if (callback != null && list) {\n      removeListener(list, callback, capture);\n    }\n  }\n  // Implementation\n  dispatchEvent(e) {\n    const list = $$2(this)[String(e.type)];\n    if (list == null) {\n      return true;\n    }\n    const event = e instanceof Event ? e : EventWrapper.wrap(e);\n    const eventData = $(event, \"event\");\n    if (eventData.dispatchFlag) {\n      throw createInvalidStateError(\"This event has been in dispatching.\");\n    }\n    eventData.dispatchFlag = true;\n    eventData.target = eventData.currentTarget = this;\n    if (!eventData.stopPropagationFlag) {\n      const {\n        cow,\n        listeners\n      } = list;\n      // Set copy-on-write flag.\n      list.cow = true;\n      // Call listeners.\n      for (let i = 0; i < listeners.length; ++i) {\n        const listener = listeners[i];\n        // Skip if removed.\n        if (isRemoved(listener)) {\n          continue;\n        }\n        // Remove this listener if has the `once` flag.\n        if (isOnce(listener) && removeListenerAt(list, i, !cow)) {\n          // Because this listener was removed, the next index is the\n          // same as the current value.\n          i -= 1;\n        }\n        // Call this listener with the `passive` flag.\n        eventData.inPassiveListenerFlag = isPassive(listener);\n        invokeCallback(listener, this, event);\n        eventData.inPassiveListenerFlag = false;\n        // Stop if the `event.stopImmediatePropagation()` method was called.\n        if (eventData.stopImmediatePropagationFlag) {\n          break;\n        }\n      }\n      // Restore copy-on-write flag.\n      if (!cow) {\n        list.cow = false;\n      }\n    }\n    eventData.target = null;\n    eventData.currentTarget = null;\n    eventData.stopImmediatePropagationFlag = false;\n    eventData.stopPropagationFlag = false;\n    eventData.dispatchFlag = false;\n    return !eventData.canceledFlag;\n  }\n}\n/**\n * Internal data.\n */\nconst internalDataMap$2 = new WeakMap();\n/**\n * Get private data.\n * @param target The event target object to get private data.\n * @param name The variable name to report.\n * @returns The private data of the event.\n */\nfunction $$2(target, name = \"this\") {\n  const retv = internalDataMap$2.get(target);\n  assertType(retv != null, \"'%s' must be an object that EventTarget constructor created, but got another one: %o\", name, target);\n  return retv;\n}\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\nfunction normalizeAddOptions(type, callback, options) {\n  var _a;\n  assertCallback(callback);\n  if (typeof options === \"object\" && options !== null) {\n    return {\n      type: String(type),\n      callback: callback !== null && callback !== void 0 ? callback : undefined,\n      capture: Boolean(options.capture),\n      passive: Boolean(options.passive),\n      once: Boolean(options.once),\n      signal: (_a = options.signal) !== null && _a !== void 0 ? _a : undefined\n    };\n  }\n  return {\n    type: String(type),\n    callback: callback !== null && callback !== void 0 ? callback : undefined,\n    capture: Boolean(options),\n    passive: false,\n    once: false,\n    signal: undefined\n  };\n}\n/**\n * Normalize options.\n * @param options The options to normalize.\n */\nfunction normalizeOptions(type, callback, options) {\n  assertCallback(callback);\n  if (typeof options === \"object\" && options !== null) {\n    return {\n      type: String(type),\n      callback: callback !== null && callback !== void 0 ? callback : undefined,\n      capture: Boolean(options.capture)\n    };\n  }\n  return {\n    type: String(type),\n    callback: callback !== null && callback !== void 0 ? callback : undefined,\n    capture: Boolean(options)\n  };\n}\n/**\n * Assert the type of 'callback' argument.\n * @param callback The callback to check.\n */\nfunction assertCallback(callback) {\n  if (typeof callback === \"function\" || typeof callback === \"object\" && callback !== null && typeof callback.handleEvent === \"function\") {\n    return;\n  }\n  if (callback == null || typeof callback === \"object\") {\n    InvalidEventListener.warn(callback);\n    return;\n  }\n  throw new TypeError(format(InvalidEventListener.message, [callback]));\n}\n/**\n * Print warning for duplicated.\n * @param listener The current listener that is duplicated.\n * @param passive The passive flag of the new duplicated listener.\n * @param once The once flag of the new duplicated listener.\n * @param signal The signal object of the new duplicated listener.\n */\nfunction warnDuplicate(listener, passive, once, signal) {\n  EventListenerWasDuplicated.warn(isCapture(listener) ? \"capture\" : \"bubble\", listener.callback);\n  if (isPassive(listener) !== passive) {\n    OptionWasIgnored.warn(\"passive\");\n  }\n  if (isOnce(listener) !== once) {\n    OptionWasIgnored.warn(\"once\");\n  }\n  if (listener.signal !== signal) {\n    OptionWasIgnored.warn(\"signal\");\n  }\n}\n// Set enumerable\nconst keys$1 = Object.getOwnPropertyNames(EventTarget.prototype);\nfor (let i = 0; i < keys$1.length; ++i) {\n  if (keys$1[i] === \"constructor\") {\n    continue;\n  }\n  Object.defineProperty(EventTarget.prototype, keys$1[i], {\n    enumerable: true\n  });\n}\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (typeof Global !== \"undefined\" && typeof Global.EventTarget !== \"undefined\") {\n  Object.setPrototypeOf(EventTarget.prototype, Global.EventTarget.prototype);\n}\n\n/**\n * Get the current value of a given event attribute.\n * @param target The `EventTarget` object to get.\n * @param type The event type.\n */\nfunction getEventAttributeValue(target, type) {\n  var _a, _b;\n  const listMap = $$2(target, \"target\");\n  return (_b = (_a = listMap[type]) === null || _a === void 0 ? void 0 : _a.attrCallback) !== null && _b !== void 0 ? _b : null;\n}\n/**\n * Set an event listener to a given event attribute.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction setEventAttributeValue(target, type, callback) {\n  if (callback != null && typeof callback !== \"function\") {\n    InvalidAttributeHandler.warn(callback);\n  }\n  if (typeof callback === \"function\" || typeof callback === \"object\" && callback !== null) {\n    upsertEventAttributeListener(target, type, callback);\n  } else {\n    removeEventAttributeListener(target, type);\n  }\n}\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n/**\n * Update or insert the given event attribute handler.\n * @param target The `EventTarget` object to set.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction upsertEventAttributeListener(target, type, callback) {\n  const list = ensureListenerList($$2(target, \"target\"), String(type));\n  list.attrCallback = callback;\n  if (list.attrListener == null) {\n    list.attrListener = addListener(list, defineEventAttributeCallback(list), false, false, false, undefined);\n  }\n}\n/**\n * Remove the given event attribute handler.\n * @param target The `EventTarget` object to remove.\n * @param type The event type.\n * @param callback The event listener.\n */\nfunction removeEventAttributeListener(target, type) {\n  const listMap = $$2(target, \"target\");\n  const list = listMap[String(type)];\n  if (list && list.attrListener) {\n    removeListener(list, list.attrListener.callback, false);\n    list.attrCallback = list.attrListener = undefined;\n  }\n}\n/**\n * Define the callback function for the given listener list object.\n * It calls `attrCallback` property if the property value is a function.\n * @param list The `ListenerList` object.\n */\nfunction defineEventAttributeCallback(list) {\n  return function (event) {\n    const callback = list.attrCallback;\n    if (typeof callback === \"function\") {\n      callback.call(this, event);\n    }\n  };\n}\n\n/**\n * Define an `EventTarget` class that has event attibutes.\n * @param types The types to define event attributes.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\nfunction defineCustomEventTarget(...types) {\n  class CustomEventTarget extends EventTarget {}\n  for (let i = 0; i < types.length; ++i) {\n    defineEventAttribute(CustomEventTarget.prototype, types[i]);\n  }\n  return CustomEventTarget;\n}\n/**\n * Define an event attribute.\n * @param target The `EventTarget` object to define an event attribute.\n * @param type The event type to define.\n * @param _eventClass Unused, but to infer `Event` class type.\n * @deprecated Use `getEventAttributeValue`/`setEventAttributeValue` pair on your derived class instead because of static analysis friendly.\n */\nfunction defineEventAttribute(target, type, _eventClass) {\n  Object.defineProperty(target, `on${type}`, {\n    get() {\n      return getEventAttributeValue(this, type);\n    },\n    set(value) {\n      setEventAttributeValue(this, type, value);\n    },\n    configurable: true,\n    enumerable: true\n  });\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventTarget);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/event-target-shim/index.mjs\n");

/***/ })

}]);