/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkinsteon_panel_frontend"] = self["webpackChunkinsteon_panel_frontend"] || []).push([["homeassistant-frontend_src_components_data-table_sort_filter_worker_ts"],{

/***/ "./homeassistant-frontend/src/components/data-table/sort_filter_worker.ts":
/*!********************************************************************************!*\
  !*** ./homeassistant-frontend/src/components/data-table/sort_filter_worker.ts ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var comlink__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! comlink */ \"./node_modules/comlink/dist/esm/comlink.mjs\");\n/* harmony import */ var proxy_polyfill__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proxy-polyfill */ \"./node_modules/proxy-polyfill/src/index.js\");\n/* harmony import */ var proxy_polyfill__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(proxy_polyfill__WEBPACK_IMPORTED_MODULE_0__);\n// To use comlink under ES5\n\n\n\nconst filterData = (data, columns, filter) => {\n  filter = filter.toUpperCase();\n  return data.filter(row => Object.entries(columns).some(columnEntry => {\n    const [key, column] = columnEntry;\n\n    if (column.filterable) {\n      if (String(column.filterKey ? row[column.valueColumn || key][column.filterKey] : row[column.valueColumn || key]).toUpperCase().includes(filter)) {\n        return true;\n      }\n    }\n\n    return false;\n  }));\n};\n\nconst sortData = (data, column, direction, sortColumn) => data.sort((a, b) => {\n  let sort = 1;\n\n  if (direction === \"desc\") {\n    sort = -1;\n  }\n\n  let valA = column.filterKey ? a[column.valueColumn || sortColumn][column.filterKey] : a[column.valueColumn || sortColumn];\n  let valB = column.filterKey ? b[column.valueColumn || sortColumn][column.filterKey] : b[column.valueColumn || sortColumn];\n\n  if (typeof valA === \"string\") {\n    valA = valA.toUpperCase();\n  }\n\n  if (typeof valB === \"string\") {\n    valB = valB.toUpperCase();\n  } // Ensure \"undefined\" is always sorted to the bottom\n\n\n  if (valA === undefined && valB !== undefined) {\n    return 1;\n  }\n\n  if (valB === undefined && valA !== undefined) {\n    return -1;\n  }\n\n  if (valA < valB) {\n    return sort * -1;\n  }\n\n  if (valA > valB) {\n    return sort * 1;\n  }\n\n  return 0;\n});\n\nconst api = {\n  filterData,\n  sortData\n};\n(0,comlink__WEBPACK_IMPORTED_MODULE_1__.expose)(api);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ob21lYXNzaXN0YW50LWZyb250ZW5kL3NyYy9jb21wb25lbnRzL2RhdGEtdGFibGUvc29ydF9maWx0ZXJfd29ya2VyLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBUUE7QUFLQTtBQUNBO0FBRUE7O0FBQ0E7QUFDQTtBQVNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBRUE7O0FBRUE7QUFPQTs7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFJQTs7QUFJQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFGQTtBQU9BIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW5zdGVvbi1wYW5lbC1mcm9udGVuZC8uL2hvbWVhc3Npc3RhbnQtZnJvbnRlbmQvc3JjL2NvbXBvbmVudHMvZGF0YS10YWJsZS9zb3J0X2ZpbHRlcl93b3JrZXIudHM/MmRmYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUbyB1c2UgY29tbGluayB1bmRlciBFUzVcbmltcG9ydCB7IGV4cG9zZSB9IGZyb20gXCJjb21saW5rXCI7XG5pbXBvcnQgXCJwcm94eS1wb2x5ZmlsbFwiO1xuaW1wb3J0IHR5cGUge1xuICBDbG9uZWREYXRhVGFibGVDb2x1bW5EYXRhLFxuICBEYXRhVGFibGVSb3dEYXRhLFxuICBTb3J0YWJsZUNvbHVtbkNvbnRhaW5lcixcbiAgU29ydGluZ0RpcmVjdGlvbixcbn0gZnJvbSBcIi4vaGEtZGF0YS10YWJsZVwiO1xuXG5jb25zdCBmaWx0ZXJEYXRhID0gKFxuICBkYXRhOiBEYXRhVGFibGVSb3dEYXRhW10sXG4gIGNvbHVtbnM6IFNvcnRhYmxlQ29sdW1uQ29udGFpbmVyLFxuICBmaWx0ZXI6IHN0cmluZ1xuKSA9PiB7XG4gIGZpbHRlciA9IGZpbHRlci50b1VwcGVyQ2FzZSgpO1xuICByZXR1cm4gZGF0YS5maWx0ZXIoKHJvdykgPT5cbiAgICBPYmplY3QuZW50cmllcyhjb2x1bW5zKS5zb21lKChjb2x1bW5FbnRyeSkgPT4ge1xuICAgICAgY29uc3QgW2tleSwgY29sdW1uXSA9IGNvbHVtbkVudHJ5O1xuICAgICAgaWYgKGNvbHVtbi5maWx0ZXJhYmxlKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBTdHJpbmcoXG4gICAgICAgICAgICBjb2x1bW4uZmlsdGVyS2V5XG4gICAgICAgICAgICAgID8gcm93W2NvbHVtbi52YWx1ZUNvbHVtbiB8fCBrZXldW2NvbHVtbi5maWx0ZXJLZXldXG4gICAgICAgICAgICAgIDogcm93W2NvbHVtbi52YWx1ZUNvbHVtbiB8fCBrZXldXG4gICAgICAgICAgKVxuICAgICAgICAgICAgLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgIC5pbmNsdWRlcyhmaWx0ZXIpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSlcbiAgKTtcbn07XG5cbmNvbnN0IHNvcnREYXRhID0gKFxuICBkYXRhOiBEYXRhVGFibGVSb3dEYXRhW10sXG4gIGNvbHVtbjogQ2xvbmVkRGF0YVRhYmxlQ29sdW1uRGF0YSxcbiAgZGlyZWN0aW9uOiBTb3J0aW5nRGlyZWN0aW9uLFxuICBzb3J0Q29sdW1uOiBzdHJpbmdcbikgPT5cbiAgZGF0YS5zb3J0KChhLCBiKSA9PiB7XG4gICAgbGV0IHNvcnQgPSAxO1xuICAgIGlmIChkaXJlY3Rpb24gPT09IFwiZGVzY1wiKSB7XG4gICAgICBzb3J0ID0gLTE7XG4gICAgfVxuXG4gICAgbGV0IHZhbEEgPSBjb2x1bW4uZmlsdGVyS2V5XG4gICAgICA/IGFbY29sdW1uLnZhbHVlQ29sdW1uIHx8IHNvcnRDb2x1bW5dW2NvbHVtbi5maWx0ZXJLZXldXG4gICAgICA6IGFbY29sdW1uLnZhbHVlQ29sdW1uIHx8IHNvcnRDb2x1bW5dO1xuXG4gICAgbGV0IHZhbEIgPSBjb2x1bW4uZmlsdGVyS2V5XG4gICAgICA/IGJbY29sdW1uLnZhbHVlQ29sdW1uIHx8IHNvcnRDb2x1bW5dW2NvbHVtbi5maWx0ZXJLZXldXG4gICAgICA6IGJbY29sdW1uLnZhbHVlQ29sdW1uIHx8IHNvcnRDb2x1bW5dO1xuXG4gICAgaWYgKHR5cGVvZiB2YWxBID09PSBcInN0cmluZ1wiKSB7XG4gICAgICB2YWxBID0gdmFsQS50b1VwcGVyQ2FzZSgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbEIgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHZhbEIgPSB2YWxCLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIFwidW5kZWZpbmVkXCIgaXMgYWx3YXlzIHNvcnRlZCB0byB0aGUgYm90dG9tXG4gICAgaWYgKHZhbEEgPT09IHVuZGVmaW5lZCAmJiB2YWxCICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAodmFsQiA9PT0gdW5kZWZpbmVkICYmIHZhbEEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmICh2YWxBIDwgdmFsQikge1xuICAgICAgcmV0dXJuIHNvcnQgKiAtMTtcbiAgICB9XG4gICAgaWYgKHZhbEEgPiB2YWxCKSB7XG4gICAgICByZXR1cm4gc29ydCAqIDE7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9KTtcblxuY29uc3QgYXBpID0ge1xuICBmaWx0ZXJEYXRhLFxuICBzb3J0RGF0YSxcbn07XG5cbmV4cG9ydCB0eXBlIEFwaSA9IHR5cGVvZiBhcGk7XG5cbmV4cG9zZShhcGkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./homeassistant-frontend/src/components/data-table/sort_filter_worker.ts\n");

/***/ }),

/***/ "./node_modules/proxy-polyfill/src/index.js":
/*!**************************************************!*\
  !*** ./node_modules/proxy-polyfill/src/index.js ***!
  \**************************************************/
/***/ (() => {

eval("/* empty file that we alias some files to that we don't want to include *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sInNvdXJjZXMiOlsid2VicGFjazovL2luc3Rlb24tcGFuZWwtZnJvbnRlbmQvLi9ob21lYXNzaXN0YW50LWZyb250ZW5kL3NyYy91dGlsL2VtcHR5LmpzP2YyM2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZW1wdHkgZmlsZSB0aGF0IHdlIGFsaWFzIHNvbWUgZmlsZXMgdG8gdGhhdCB3ZSBkb24ndCB3YW50IHRvIGluY2x1ZGUgKi9cbiJdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcHJveHktcG9seWZpbGwvc3JjL2luZGV4LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/proxy-polyfill/src/index.js\n");

/***/ }),

/***/ "./node_modules/comlink/dist/esm/comlink.mjs":
/*!***************************************************!*\
  !*** ./node_modules/comlink/dist/esm/comlink.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createEndpoint\": () => (/* binding */ createEndpoint),\n/* harmony export */   \"expose\": () => (/* binding */ expose),\n/* harmony export */   \"proxy\": () => (/* binding */ proxy),\n/* harmony export */   \"proxyMarker\": () => (/* binding */ proxyMarker),\n/* harmony export */   \"releaseProxy\": () => (/* binding */ releaseProxy),\n/* harmony export */   \"transfer\": () => (/* binding */ transfer),\n/* harmony export */   \"transferHandlers\": () => (/* binding */ transferHandlers),\n/* harmony export */   \"windowEndpoint\": () => (/* binding */ windowEndpoint),\n/* harmony export */   \"wrap\": () => (/* binding */ wrap)\n/* harmony export */ });\n/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\nconst isObject = val => typeof val === \"object\" && val !== null || typeof val === \"function\";\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\n\n\nconst proxyTransferHandler = {\n  canHandle: val => isObject(val) && val[proxyMarker],\n\n  serialize(obj) {\n    const {\n      port1,\n      port2\n    } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  }\n\n};\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\n\nconst throwTransferHandler = {\n  canHandle: value => isObject(value) && throwMarker in value,\n\n  serialize({\n    value\n  }) {\n    let serialized;\n\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack\n        }\n      };\n    } else {\n      serialized = {\n        isError: false,\n        value\n      };\n    }\n\n    return [serialized, []];\n  },\n\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(new Error(serialized.value.message), serialized.value);\n    }\n\n    throw serialized.value;\n  }\n\n};\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\n\nconst transferHandlers = new Map([[\"proxy\", proxyTransferHandler], [\"throw\", throwTransferHandler]]);\n\nfunction expose(obj, ep = self) {\n  ep.addEventListener(\"message\", function callback(ev) {\n    if (!ev || !ev.data) {\n      return;\n    }\n\n    const {\n      id,\n      type,\n      path\n    } = Object.assign({\n      path: []\n    }, ev.data);\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n\n      switch (type) {\n        case \"GET\"\n        /* GET */\n        :\n          {\n            returnValue = rawValue;\n          }\n          break;\n\n        case \"SET\"\n        /* SET */\n        :\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n\n        case \"APPLY\"\n        /* APPLY */\n        :\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n\n        case \"CONSTRUCT\"\n        /* CONSTRUCT */\n        :\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n\n        case \"ENDPOINT\"\n        /* ENDPOINT */\n        :\n          {\n            const {\n              port1,\n              port2\n            } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n\n        case \"RELEASE\"\n        /* RELEASE */\n        :\n          {\n            returnValue = undefined;\n          }\n          break;\n\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = {\n        value,\n        [throwMarker]: 0\n      };\n    }\n\n    Promise.resolve(returnValue).catch(value => {\n      return {\n        value,\n        [throwMarker]: 0\n      };\n    }).then(returnValue => {\n      const [wireValue, transferables] = toWireValue(returnValue);\n      ep.postMessage(Object.assign(Object.assign({}, wireValue), {\n        id\n      }), transferables);\n\n      if (type === \"RELEASE\"\n      /* RELEASE */\n      ) {\n        // detach and deactive after sending release response above.\n        ep.removeEventListener(\"message\", callback);\n        closeEndPoint(ep);\n      }\n    });\n  });\n\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint) {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nfunction wrap(ep, target) {\n  return createProxy(ep, [], target);\n}\n\nfunction throwIfProxyReleased(isReleased) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy(ep, path = [], target = function () {}) {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: \"RELEASE\"\n            /* RELEASE */\n            ,\n            path: path.map(p => p.toString())\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return {\n            then: () => proxy\n          };\n        }\n\n        const r = requestResponseMessage(ep, {\n          type: \"GET\"\n          /* GET */\n          ,\n          path: path.map(p => p.toString())\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n\n      return createProxy(ep, [...path, prop]);\n    },\n\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased); // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(ep, {\n        type: \"SET\"\n        /* SET */\n        ,\n        path: [...path, prop].map(p => p.toString()),\n        value\n      }, transferables).then(fromWireValue);\n    },\n\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n\n      if (last === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: \"ENDPOINT\"\n          /* ENDPOINT */\n\n        }).then(fromWireValue);\n      } // We just pretend that `bind()` didn’t happen.\n\n\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, {\n        type: \"APPLY\"\n        /* APPLY */\n        ,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    },\n\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(ep, {\n        type: \"CONSTRUCT\"\n        /* CONSTRUCT */\n        ,\n        path: path.map(p => p.toString()),\n        argumentList\n      }, transferables).then(fromWireValue);\n    }\n\n  });\n  return proxy;\n}\n\nfunction myFlat(arr) {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList) {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map(v => v[0]), myFlat(processed.map(v => v[1]))];\n}\n\nconst transferCache = new WeakMap();\n\nfunction transfer(obj, transfers) {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nfunction proxy(obj) {\n  return Object.assign(obj, {\n    [proxyMarker]: true\n  });\n}\n\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\n  return {\n    postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context)\n  };\n}\n\nfunction toWireValue(value) {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [{\n        type: \"HANDLER\"\n        /* HANDLER */\n        ,\n        name,\n        value: serializedValue\n      }, transferables];\n    }\n  }\n\n  return [{\n    type: \"RAW\"\n    /* RAW */\n    ,\n    value\n  }, transferCache.get(value) || []];\n}\n\nfunction fromWireValue(value) {\n  switch (value.type) {\n    case \"HANDLER\"\n    /* HANDLER */\n    :\n      return transferHandlers.get(value.name).deserialize(value.value);\n\n    case \"RAW\"\n    /* RAW */\n    :\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(ep, msg, transfers) {\n  return new Promise(resolve => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n\n      ep.removeEventListener(\"message\", l);\n      resolve(ev.data);\n    });\n\n    if (ep.start) {\n      ep.start();\n    }\n\n    ep.postMessage(Object.assign({\n      id\n    }, msg), transfers);\n  });\n}\n\nfunction generateUUID() {\n  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join(\"-\");\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/comlink/dist/esm/comlink.mjs\n");

/***/ })

}]);