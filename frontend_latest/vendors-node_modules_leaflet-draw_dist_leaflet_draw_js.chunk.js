/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkinsteon_panel_frontend"] = self["webpackChunkinsteon_panel_frontend"] || []).push([["vendors-node_modules_leaflet-draw_dist_leaflet_draw_js"],{

/***/ "./node_modules/leaflet-draw/dist/leaflet.draw.js":
/*!********************************************************!*\
  !*** ./node_modules/leaflet-draw/dist/leaflet.draw.js ***!
  \********************************************************/
/***/ (() => {

eval("/*\n Leaflet.draw 1.0.4, a plugin that adds drawing and editing tools to Leaflet powered maps.\n (c) 2012-2017, Jacob Toye, Jon West, Smartrak, Leaflet\n\n https://github.com/Leaflet/Leaflet.draw\n http://leafletjs.com\n */\n!function (t, e, i) {\n  function o(t, e) {\n    for (; (t = t.parentElement) && !t.classList.contains(e););\n\n    return t;\n  }\n\n  L.drawVersion = \"1.0.4\", L.Draw = {}, L.drawLocal = {\n    draw: {\n      toolbar: {\n        actions: {\n          title: \"Cancel drawing\",\n          text: \"Cancel\"\n        },\n        finish: {\n          title: \"Finish drawing\",\n          text: \"Finish\"\n        },\n        undo: {\n          title: \"Delete last point drawn\",\n          text: \"Delete last point\"\n        },\n        buttons: {\n          polyline: \"Draw a polyline\",\n          polygon: \"Draw a polygon\",\n          rectangle: \"Draw a rectangle\",\n          circle: \"Draw a circle\",\n          marker: \"Draw a marker\",\n          circlemarker: \"Draw a circlemarker\"\n        }\n      },\n      handlers: {\n        circle: {\n          tooltip: {\n            start: \"Click and drag to draw circle.\"\n          },\n          radius: \"Radius\"\n        },\n        circlemarker: {\n          tooltip: {\n            start: \"Click map to place circle marker.\"\n          }\n        },\n        marker: {\n          tooltip: {\n            start: \"Click map to place marker.\"\n          }\n        },\n        polygon: {\n          tooltip: {\n            start: \"Click to start drawing shape.\",\n            cont: \"Click to continue drawing shape.\",\n            end: \"Click first point to close this shape.\"\n          }\n        },\n        polyline: {\n          error: \"<strong>Error:</strong> shape edges cannot cross!\",\n          tooltip: {\n            start: \"Click to start drawing line.\",\n            cont: \"Click to continue drawing line.\",\n            end: \"Click last point to finish line.\"\n          }\n        },\n        rectangle: {\n          tooltip: {\n            start: \"Click and drag to draw rectangle.\"\n          }\n        },\n        simpleshape: {\n          tooltip: {\n            end: \"Release mouse to finish drawing.\"\n          }\n        }\n      }\n    },\n    edit: {\n      toolbar: {\n        actions: {\n          save: {\n            title: \"Save changes\",\n            text: \"Save\"\n          },\n          cancel: {\n            title: \"Cancel editing, discards all changes\",\n            text: \"Cancel\"\n          },\n          clearAll: {\n            title: \"Clear all layers\",\n            text: \"Clear All\"\n          }\n        },\n        buttons: {\n          edit: \"Edit layers\",\n          editDisabled: \"No layers to edit\",\n          remove: \"Delete layers\",\n          removeDisabled: \"No layers to delete\"\n        }\n      },\n      handlers: {\n        edit: {\n          tooltip: {\n            text: \"Drag handles or markers to edit features.\",\n            subtext: \"Click cancel to undo changes.\"\n          }\n        },\n        remove: {\n          tooltip: {\n            text: \"Click on a feature to remove.\"\n          }\n        }\n      }\n    }\n  }, L.Draw.Event = {}, L.Draw.Event.CREATED = \"draw:created\", L.Draw.Event.EDITED = \"draw:edited\", L.Draw.Event.DELETED = \"draw:deleted\", L.Draw.Event.DRAWSTART = \"draw:drawstart\", L.Draw.Event.DRAWSTOP = \"draw:drawstop\", L.Draw.Event.DRAWVERTEX = \"draw:drawvertex\", L.Draw.Event.EDITSTART = \"draw:editstart\", L.Draw.Event.EDITMOVE = \"draw:editmove\", L.Draw.Event.EDITRESIZE = \"draw:editresize\", L.Draw.Event.EDITVERTEX = \"draw:editvertex\", L.Draw.Event.EDITSTOP = \"draw:editstop\", L.Draw.Event.DELETESTART = \"draw:deletestart\", L.Draw.Event.DELETESTOP = \"draw:deletestop\", L.Draw.Event.TOOLBAROPENED = \"draw:toolbaropened\", L.Draw.Event.TOOLBARCLOSED = \"draw:toolbarclosed\", L.Draw.Event.MARKERCONTEXT = \"draw:markercontext\", L.Draw = L.Draw || {}, L.Draw.Feature = L.Handler.extend({\n    initialize: function (t, e) {\n      this._map = t, this._container = t._container, this._overlayPane = t._panes.overlayPane, this._popupPane = t._panes.popupPane, e && e.shapeOptions && (e.shapeOptions = L.Util.extend({}, this.options.shapeOptions, e.shapeOptions)), L.setOptions(this, e);\n      var i = L.version.split(\".\");\n      1 === parseInt(i[0], 10) && parseInt(i[1], 10) >= 2 ? L.Draw.Feature.include(L.Evented.prototype) : L.Draw.Feature.include(L.Mixin.Events);\n    },\n    enable: function () {\n      this._enabled || (L.Handler.prototype.enable.call(this), this.fire(\"enabled\", {\n        handler: this.type\n      }), this._map.fire(L.Draw.Event.DRAWSTART, {\n        layerType: this.type\n      }));\n    },\n    disable: function () {\n      this._enabled && (L.Handler.prototype.disable.call(this), this._map.fire(L.Draw.Event.DRAWSTOP, {\n        layerType: this.type\n      }), this.fire(\"disabled\", {\n        handler: this.type\n      }));\n    },\n    addHooks: function () {\n      var t = this._map;\n      t && (L.DomUtil.disableTextSelection(), t.getContainer().focus(), this._tooltip = new L.Draw.Tooltip(this._map), L.DomEvent.on(this._container, \"keyup\", this._cancelDrawing, this));\n    },\n    removeHooks: function () {\n      this._map && (L.DomUtil.enableTextSelection(), this._tooltip.dispose(), this._tooltip = null, L.DomEvent.off(this._container, \"keyup\", this._cancelDrawing, this));\n    },\n    setOptions: function (t) {\n      L.setOptions(this, t);\n    },\n    _fireCreatedEvent: function (t) {\n      this._map.fire(L.Draw.Event.CREATED, {\n        layer: t,\n        layerType: this.type\n      });\n    },\n    _cancelDrawing: function (t) {\n      27 === t.keyCode && (this._map.fire(\"draw:canceled\", {\n        layerType: this.type\n      }), this.disable());\n    }\n  }), L.Draw.Polyline = L.Draw.Feature.extend({\n    statics: {\n      TYPE: \"polyline\"\n    },\n    Poly: L.Polyline,\n    options: {\n      allowIntersection: !0,\n      repeatMode: !1,\n      drawError: {\n        color: \"#b00b00\",\n        timeout: 2500\n      },\n      icon: new L.DivIcon({\n        iconSize: new L.Point(8, 8),\n        className: \"leaflet-div-icon leaflet-editing-icon\"\n      }),\n      touchIcon: new L.DivIcon({\n        iconSize: new L.Point(20, 20),\n        className: \"leaflet-div-icon leaflet-editing-icon leaflet-touch-icon\"\n      }),\n      guidelineDistance: 20,\n      maxGuideLineLength: 4e3,\n      shapeOptions: {\n        stroke: !0,\n        color: \"#3388ff\",\n        weight: 4,\n        opacity: .5,\n        fill: !1,\n        clickable: !0\n      },\n      metric: !0,\n      feet: !0,\n      nautic: !1,\n      showLength: !0,\n      zIndexOffset: 2e3,\n      factor: 1,\n      maxPoints: 0\n    },\n    initialize: function (t, e) {\n      L.Browser.touch && (this.options.icon = this.options.touchIcon), this.options.drawError.message = L.drawLocal.draw.handlers.polyline.error, e && e.drawError && (e.drawError = L.Util.extend({}, this.options.drawError, e.drawError)), this.type = L.Draw.Polyline.TYPE, L.Draw.Feature.prototype.initialize.call(this, t, e);\n    },\n    addHooks: function () {\n      L.Draw.Feature.prototype.addHooks.call(this), this._map && (this._markers = [], this._markerGroup = new L.LayerGroup(), this._map.addLayer(this._markerGroup), this._poly = new L.Polyline([], this.options.shapeOptions), this._tooltip.updateContent(this._getTooltipText()), this._mouseMarker || (this._mouseMarker = L.marker(this._map.getCenter(), {\n        icon: L.divIcon({\n          className: \"leaflet-mouse-marker\",\n          iconAnchor: [20, 20],\n          iconSize: [40, 40]\n        }),\n        opacity: 0,\n        zIndexOffset: this.options.zIndexOffset\n      })), this._mouseMarker.on(\"mouseout\", this._onMouseOut, this).on(\"mousemove\", this._onMouseMove, this).on(\"mousedown\", this._onMouseDown, this).on(\"mouseup\", this._onMouseUp, this).addTo(this._map), this._map.on(\"mouseup\", this._onMouseUp, this).on(\"mousemove\", this._onMouseMove, this).on(\"zoomlevelschange\", this._onZoomEnd, this).on(\"touchstart\", this._onTouch, this).on(\"zoomend\", this._onZoomEnd, this));\n    },\n    removeHooks: function () {\n      L.Draw.Feature.prototype.removeHooks.call(this), this._clearHideErrorTimeout(), this._cleanUpShape(), this._map.removeLayer(this._markerGroup), delete this._markerGroup, delete this._markers, this._map.removeLayer(this._poly), delete this._poly, this._mouseMarker.off(\"mousedown\", this._onMouseDown, this).off(\"mouseout\", this._onMouseOut, this).off(\"mouseup\", this._onMouseUp, this).off(\"mousemove\", this._onMouseMove, this), this._map.removeLayer(this._mouseMarker), delete this._mouseMarker, this._clearGuides(), this._map.off(\"mouseup\", this._onMouseUp, this).off(\"mousemove\", this._onMouseMove, this).off(\"zoomlevelschange\", this._onZoomEnd, this).off(\"zoomend\", this._onZoomEnd, this).off(\"touchstart\", this._onTouch, this).off(\"click\", this._onTouch, this);\n    },\n    deleteLastVertex: function () {\n      if (!(this._markers.length <= 1)) {\n        var t = this._markers.pop(),\n            e = this._poly,\n            i = e.getLatLngs(),\n            o = i.splice(-1, 1)[0];\n\n        this._poly.setLatLngs(i), this._markerGroup.removeLayer(t), e.getLatLngs().length < 2 && this._map.removeLayer(e), this._vertexChanged(o, !1);\n      }\n    },\n    addVertex: function (t) {\n      if (this._markers.length >= 2 && !this.options.allowIntersection && this._poly.newLatLngIntersects(t)) return void this._showErrorTooltip();\n      this._errorShown && this._hideErrorTooltip(), this._markers.push(this._createMarker(t)), this._poly.addLatLng(t), 2 === this._poly.getLatLngs().length && this._map.addLayer(this._poly), this._vertexChanged(t, !0);\n    },\n    completeShape: function () {\n      this._markers.length <= 1 || !this._shapeIsValid() || (this._fireCreatedEvent(), this.disable(), this.options.repeatMode && this.enable());\n    },\n    _finishShape: function () {\n      var t = this._poly._defaultShape ? this._poly._defaultShape() : this._poly.getLatLngs(),\n          e = this._poly.newLatLngIntersects(t[t.length - 1]);\n\n      if (!this.options.allowIntersection && e || !this._shapeIsValid()) return void this._showErrorTooltip();\n      this._fireCreatedEvent(), this.disable(), this.options.repeatMode && this.enable();\n    },\n    _shapeIsValid: function () {\n      return !0;\n    },\n    _onZoomEnd: function () {\n      null !== this._markers && this._updateGuide();\n    },\n    _onMouseMove: function (t) {\n      var e = this._map.mouseEventToLayerPoint(t.originalEvent),\n          i = this._map.layerPointToLatLng(e);\n\n      this._currentLatLng = i, this._updateTooltip(i), this._updateGuide(e), this._mouseMarker.setLatLng(i), L.DomEvent.preventDefault(t.originalEvent);\n    },\n    _vertexChanged: function (t, e) {\n      this._map.fire(L.Draw.Event.DRAWVERTEX, {\n        layers: this._markerGroup\n      }), this._updateFinishHandler(), this._updateRunningMeasure(t, e), this._clearGuides(), this._updateTooltip();\n    },\n    _onMouseDown: function (t) {\n      if (!this._clickHandled && !this._touchHandled && !this._disableMarkers) {\n        this._onMouseMove(t), this._clickHandled = !0, this._disableNewMarkers();\n        var e = t.originalEvent,\n            i = e.clientX,\n            o = e.clientY;\n\n        this._startPoint.call(this, i, o);\n      }\n    },\n    _startPoint: function (t, e) {\n      this._mouseDownOrigin = L.point(t, e);\n    },\n    _onMouseUp: function (t) {\n      var e = t.originalEvent,\n          i = e.clientX,\n          o = e.clientY;\n      this._endPoint.call(this, i, o, t), this._clickHandled = null;\n    },\n    _endPoint: function (e, i, o) {\n      if (this._mouseDownOrigin) {\n        var a = L.point(e, i).distanceTo(this._mouseDownOrigin),\n            n = this._calculateFinishDistance(o.latlng);\n\n        this.options.maxPoints > 1 && this.options.maxPoints == this._markers.length + 1 ? (this.addVertex(o.latlng), this._finishShape()) : n < 10 && L.Browser.touch ? this._finishShape() : Math.abs(a) < 9 * (t.devicePixelRatio || 1) && this.addVertex(o.latlng), this._enableNewMarkers();\n      }\n\n      this._mouseDownOrigin = null;\n    },\n    _onTouch: function (t) {\n      var e,\n          i,\n          o = t.originalEvent;\n      !o.touches || !o.touches[0] || this._clickHandled || this._touchHandled || this._disableMarkers || (e = o.touches[0].clientX, i = o.touches[0].clientY, this._disableNewMarkers(), this._touchHandled = !0, this._startPoint.call(this, e, i), this._endPoint.call(this, e, i, t), this._touchHandled = null), this._clickHandled = null;\n    },\n    _onMouseOut: function () {\n      this._tooltip && this._tooltip._onMouseOut.call(this._tooltip);\n    },\n    _calculateFinishDistance: function (t) {\n      var e;\n\n      if (this._markers.length > 0) {\n        var i;\n        if (this.type === L.Draw.Polyline.TYPE) i = this._markers[this._markers.length - 1];else {\n          if (this.type !== L.Draw.Polygon.TYPE) return 1 / 0;\n          i = this._markers[0];\n        }\n\n        var o = this._map.latLngToContainerPoint(i.getLatLng()),\n            a = new L.Marker(t, {\n          icon: this.options.icon,\n          zIndexOffset: 2 * this.options.zIndexOffset\n        }),\n            n = this._map.latLngToContainerPoint(a.getLatLng());\n\n        e = o.distanceTo(n);\n      } else e = 1 / 0;\n\n      return e;\n    },\n    _updateFinishHandler: function () {\n      var t = this._markers.length;\n      t > 1 && this._markers[t - 1].on(\"click\", this._finishShape, this), t > 2 && this._markers[t - 2].off(\"click\", this._finishShape, this);\n    },\n    _createMarker: function (t) {\n      var e = new L.Marker(t, {\n        icon: this.options.icon,\n        zIndexOffset: 2 * this.options.zIndexOffset\n      });\n      return this._markerGroup.addLayer(e), e;\n    },\n    _updateGuide: function (t) {\n      var e = this._markers ? this._markers.length : 0;\n      e > 0 && (t = t || this._map.latLngToLayerPoint(this._currentLatLng), this._clearGuides(), this._drawGuide(this._map.latLngToLayerPoint(this._markers[e - 1].getLatLng()), t));\n    },\n    _updateTooltip: function (t) {\n      var e = this._getTooltipText();\n\n      t && this._tooltip.updatePosition(t), this._errorShown || this._tooltip.updateContent(e);\n    },\n    _drawGuide: function (t, e) {\n      var i,\n          o,\n          a,\n          n = Math.floor(Math.sqrt(Math.pow(e.x - t.x, 2) + Math.pow(e.y - t.y, 2))),\n          s = this.options.guidelineDistance,\n          r = this.options.maxGuideLineLength,\n          l = n > r ? n - r : s;\n\n      for (this._guidesContainer || (this._guidesContainer = L.DomUtil.create(\"div\", \"leaflet-draw-guides\", this._overlayPane)); l < n; l += this.options.guidelineDistance) i = l / n, o = {\n        x: Math.floor(t.x * (1 - i) + i * e.x),\n        y: Math.floor(t.y * (1 - i) + i * e.y)\n      }, a = L.DomUtil.create(\"div\", \"leaflet-draw-guide-dash\", this._guidesContainer), a.style.backgroundColor = this._errorShown ? this.options.drawError.color : this.options.shapeOptions.color, L.DomUtil.setPosition(a, o);\n    },\n    _updateGuideColor: function (t) {\n      if (this._guidesContainer) for (var e = 0, i = this._guidesContainer.childNodes.length; e < i; e++) this._guidesContainer.childNodes[e].style.backgroundColor = t;\n    },\n    _clearGuides: function () {\n      if (this._guidesContainer) for (; this._guidesContainer.firstChild;) this._guidesContainer.removeChild(this._guidesContainer.firstChild);\n    },\n    _getTooltipText: function () {\n      var t,\n          e,\n          i = this.options.showLength;\n      return 0 === this._markers.length ? t = {\n        text: L.drawLocal.draw.handlers.polyline.tooltip.start\n      } : (e = i ? this._getMeasurementString() : \"\", t = 1 === this._markers.length ? {\n        text: L.drawLocal.draw.handlers.polyline.tooltip.cont,\n        subtext: e\n      } : {\n        text: L.drawLocal.draw.handlers.polyline.tooltip.end,\n        subtext: e\n      }), t;\n    },\n    _updateRunningMeasure: function (t, e) {\n      var i,\n          o,\n          a = this._markers.length;\n      1 === this._markers.length ? this._measurementRunningTotal = 0 : (i = a - (e ? 2 : 1), o = L.GeometryUtil.isVersion07x() ? t.distanceTo(this._markers[i].getLatLng()) * (this.options.factor || 1) : this._map.distance(t, this._markers[i].getLatLng()) * (this.options.factor || 1), this._measurementRunningTotal += o * (e ? 1 : -1));\n    },\n    _getMeasurementString: function () {\n      var t,\n          e = this._currentLatLng,\n          i = this._markers[this._markers.length - 1].getLatLng();\n\n      return t = L.GeometryUtil.isVersion07x() ? i && e && e.distanceTo ? this._measurementRunningTotal + e.distanceTo(i) * (this.options.factor || 1) : this._measurementRunningTotal || 0 : i && e ? this._measurementRunningTotal + this._map.distance(e, i) * (this.options.factor || 1) : this._measurementRunningTotal || 0, L.GeometryUtil.readableDistance(t, this.options.metric, this.options.feet, this.options.nautic, this.options.precision);\n    },\n    _showErrorTooltip: function () {\n      this._errorShown = !0, this._tooltip.showAsError().updateContent({\n        text: this.options.drawError.message\n      }), this._updateGuideColor(this.options.drawError.color), this._poly.setStyle({\n        color: this.options.drawError.color\n      }), this._clearHideErrorTimeout(), this._hideErrorTimeout = setTimeout(L.Util.bind(this._hideErrorTooltip, this), this.options.drawError.timeout);\n    },\n    _hideErrorTooltip: function () {\n      this._errorShown = !1, this._clearHideErrorTimeout(), this._tooltip.removeError().updateContent(this._getTooltipText()), this._updateGuideColor(this.options.shapeOptions.color), this._poly.setStyle({\n        color: this.options.shapeOptions.color\n      });\n    },\n    _clearHideErrorTimeout: function () {\n      this._hideErrorTimeout && (clearTimeout(this._hideErrorTimeout), this._hideErrorTimeout = null);\n    },\n    _disableNewMarkers: function () {\n      this._disableMarkers = !0;\n    },\n    _enableNewMarkers: function () {\n      setTimeout(function () {\n        this._disableMarkers = !1;\n      }.bind(this), 50);\n    },\n    _cleanUpShape: function () {\n      this._markers.length > 1 && this._markers[this._markers.length - 1].off(\"click\", this._finishShape, this);\n    },\n    _fireCreatedEvent: function () {\n      var t = new this.Poly(this._poly.getLatLngs(), this.options.shapeOptions);\n\n      L.Draw.Feature.prototype._fireCreatedEvent.call(this, t);\n    }\n  }), L.Draw.Polygon = L.Draw.Polyline.extend({\n    statics: {\n      TYPE: \"polygon\"\n    },\n    Poly: L.Polygon,\n    options: {\n      showArea: !1,\n      showLength: !1,\n      shapeOptions: {\n        stroke: !0,\n        color: \"#3388ff\",\n        weight: 4,\n        opacity: .5,\n        fill: !0,\n        fillColor: null,\n        fillOpacity: .2,\n        clickable: !0\n      },\n      metric: !0,\n      feet: !0,\n      nautic: !1,\n      precision: {}\n    },\n    initialize: function (t, e) {\n      L.Draw.Polyline.prototype.initialize.call(this, t, e), this.type = L.Draw.Polygon.TYPE;\n    },\n    _updateFinishHandler: function () {\n      var t = this._markers.length;\n      1 === t && this._markers[0].on(\"click\", this._finishShape, this), t > 2 && (this._markers[t - 1].on(\"dblclick\", this._finishShape, this), t > 3 && this._markers[t - 2].off(\"dblclick\", this._finishShape, this));\n    },\n    _getTooltipText: function () {\n      var t, e;\n      return 0 === this._markers.length ? t = L.drawLocal.draw.handlers.polygon.tooltip.start : this._markers.length < 3 ? (t = L.drawLocal.draw.handlers.polygon.tooltip.cont, e = this._getMeasurementString()) : (t = L.drawLocal.draw.handlers.polygon.tooltip.end, e = this._getMeasurementString()), {\n        text: t,\n        subtext: e\n      };\n    },\n    _getMeasurementString: function () {\n      var t = this._area,\n          e = \"\";\n      return t || this.options.showLength ? (this.options.showLength && (e = L.Draw.Polyline.prototype._getMeasurementString.call(this)), t && (e += \"<br>\" + L.GeometryUtil.readableArea(t, this.options.metric, this.options.precision)), e) : null;\n    },\n    _shapeIsValid: function () {\n      return this._markers.length >= 3;\n    },\n    _vertexChanged: function (t, e) {\n      var i;\n      !this.options.allowIntersection && this.options.showArea && (i = this._poly.getLatLngs(), this._area = L.GeometryUtil.geodesicArea(i)), L.Draw.Polyline.prototype._vertexChanged.call(this, t, e);\n    },\n    _cleanUpShape: function () {\n      var t = this._markers.length;\n      t > 0 && (this._markers[0].off(\"click\", this._finishShape, this), t > 2 && this._markers[t - 1].off(\"dblclick\", this._finishShape, this));\n    }\n  }), L.SimpleShape = {}, L.Draw.SimpleShape = L.Draw.Feature.extend({\n    options: {\n      repeatMode: !1\n    },\n    initialize: function (t, e) {\n      this._endLabelText = L.drawLocal.draw.handlers.simpleshape.tooltip.end, L.Draw.Feature.prototype.initialize.call(this, t, e);\n    },\n    addHooks: function () {\n      L.Draw.Feature.prototype.addHooks.call(this), this._map && (this._mapDraggable = this._map.dragging.enabled(), this._mapDraggable && this._map.dragging.disable(), this._container.style.cursor = \"crosshair\", this._tooltip.updateContent({\n        text: this._initialLabelText\n      }), this._map.on(\"mousedown\", this._onMouseDown, this).on(\"mousemove\", this._onMouseMove, this).on(\"touchstart\", this._onMouseDown, this).on(\"touchmove\", this._onMouseMove, this), e.addEventListener(\"touchstart\", L.DomEvent.preventDefault, {\n        passive: !1\n      }));\n    },\n    removeHooks: function () {\n      L.Draw.Feature.prototype.removeHooks.call(this), this._map && (this._mapDraggable && this._map.dragging.enable(), this._container.style.cursor = \"\", this._map.off(\"mousedown\", this._onMouseDown, this).off(\"mousemove\", this._onMouseMove, this).off(\"touchstart\", this._onMouseDown, this).off(\"touchmove\", this._onMouseMove, this), L.DomEvent.off(e, \"mouseup\", this._onMouseUp, this), L.DomEvent.off(e, \"touchend\", this._onMouseUp, this), e.removeEventListener(\"touchstart\", L.DomEvent.preventDefault), this._shape && (this._map.removeLayer(this._shape), delete this._shape)), this._isDrawing = !1;\n    },\n    _getTooltipText: function () {\n      return {\n        text: this._endLabelText\n      };\n    },\n    _onMouseDown: function (t) {\n      this._isDrawing = !0, this._startLatLng = t.latlng, L.DomEvent.on(e, \"mouseup\", this._onMouseUp, this).on(e, \"touchend\", this._onMouseUp, this).preventDefault(t.originalEvent);\n    },\n    _onMouseMove: function (t) {\n      var e = t.latlng;\n      this._tooltip.updatePosition(e), this._isDrawing && (this._tooltip.updateContent(this._getTooltipText()), this._drawShape(e));\n    },\n    _onMouseUp: function () {\n      this._shape && this._fireCreatedEvent(), this.disable(), this.options.repeatMode && this.enable();\n    }\n  }), L.Draw.Rectangle = L.Draw.SimpleShape.extend({\n    statics: {\n      TYPE: \"rectangle\"\n    },\n    options: {\n      shapeOptions: {\n        stroke: !0,\n        color: \"#3388ff\",\n        weight: 4,\n        opacity: .5,\n        fill: !0,\n        fillColor: null,\n        fillOpacity: .2,\n        clickable: !0\n      },\n      showArea: !0,\n      metric: !0\n    },\n    initialize: function (t, e) {\n      this.type = L.Draw.Rectangle.TYPE, this._initialLabelText = L.drawLocal.draw.handlers.rectangle.tooltip.start, L.Draw.SimpleShape.prototype.initialize.call(this, t, e);\n    },\n    disable: function () {\n      this._enabled && (this._isCurrentlyTwoClickDrawing = !1, L.Draw.SimpleShape.prototype.disable.call(this));\n    },\n    _onMouseUp: function (t) {\n      if (!this._shape && !this._isCurrentlyTwoClickDrawing) return void (this._isCurrentlyTwoClickDrawing = !0);\n      this._isCurrentlyTwoClickDrawing && !o(t.target, \"leaflet-pane\") || L.Draw.SimpleShape.prototype._onMouseUp.call(this);\n    },\n    _drawShape: function (t) {\n      this._shape ? this._shape.setBounds(new L.LatLngBounds(this._startLatLng, t)) : (this._shape = new L.Rectangle(new L.LatLngBounds(this._startLatLng, t), this.options.shapeOptions), this._map.addLayer(this._shape));\n    },\n    _fireCreatedEvent: function () {\n      var t = new L.Rectangle(this._shape.getBounds(), this.options.shapeOptions);\n\n      L.Draw.SimpleShape.prototype._fireCreatedEvent.call(this, t);\n    },\n    _getTooltipText: function () {\n      var t,\n          e,\n          i,\n          o = L.Draw.SimpleShape.prototype._getTooltipText.call(this),\n          a = this._shape,\n          n = this.options.showArea;\n\n      return a && (t = this._shape._defaultShape ? this._shape._defaultShape() : this._shape.getLatLngs(), e = L.GeometryUtil.geodesicArea(t), i = n ? L.GeometryUtil.readableArea(e, this.options.metric) : \"\"), {\n        text: o.text,\n        subtext: i\n      };\n    }\n  }), L.Draw.Marker = L.Draw.Feature.extend({\n    statics: {\n      TYPE: \"marker\"\n    },\n    options: {\n      icon: new L.Icon.Default(),\n      repeatMode: !1,\n      zIndexOffset: 2e3\n    },\n    initialize: function (t, e) {\n      this.type = L.Draw.Marker.TYPE, this._initialLabelText = L.drawLocal.draw.handlers.marker.tooltip.start, L.Draw.Feature.prototype.initialize.call(this, t, e);\n    },\n    addHooks: function () {\n      L.Draw.Feature.prototype.addHooks.call(this), this._map && (this._tooltip.updateContent({\n        text: this._initialLabelText\n      }), this._mouseMarker || (this._mouseMarker = L.marker(this._map.getCenter(), {\n        icon: L.divIcon({\n          className: \"leaflet-mouse-marker\",\n          iconAnchor: [20, 20],\n          iconSize: [40, 40]\n        }),\n        opacity: 0,\n        zIndexOffset: this.options.zIndexOffset\n      })), this._mouseMarker.on(\"click\", this._onClick, this).addTo(this._map), this._map.on(\"mousemove\", this._onMouseMove, this), this._map.on(\"click\", this._onTouch, this));\n    },\n    removeHooks: function () {\n      L.Draw.Feature.prototype.removeHooks.call(this), this._map && (this._map.off(\"click\", this._onClick, this).off(\"click\", this._onTouch, this), this._marker && (this._marker.off(\"click\", this._onClick, this), this._map.removeLayer(this._marker), delete this._marker), this._mouseMarker.off(\"click\", this._onClick, this), this._map.removeLayer(this._mouseMarker), delete this._mouseMarker, this._map.off(\"mousemove\", this._onMouseMove, this));\n    },\n    _onMouseMove: function (t) {\n      var e = t.latlng;\n      this._tooltip.updatePosition(e), this._mouseMarker.setLatLng(e), this._marker ? (e = this._mouseMarker.getLatLng(), this._marker.setLatLng(e)) : (this._marker = this._createMarker(e), this._marker.on(\"click\", this._onClick, this), this._map.on(\"click\", this._onClick, this).addLayer(this._marker));\n    },\n    _createMarker: function (t) {\n      return new L.Marker(t, {\n        icon: this.options.icon,\n        zIndexOffset: this.options.zIndexOffset\n      });\n    },\n    _onClick: function () {\n      this._fireCreatedEvent(), this.disable(), this.options.repeatMode && this.enable();\n    },\n    _onTouch: function (t) {\n      this._onMouseMove(t), this._onClick();\n    },\n    _fireCreatedEvent: function () {\n      var t = new L.Marker.Touch(this._marker.getLatLng(), {\n        icon: this.options.icon\n      });\n\n      L.Draw.Feature.prototype._fireCreatedEvent.call(this, t);\n    }\n  }), L.Draw.CircleMarker = L.Draw.Marker.extend({\n    statics: {\n      TYPE: \"circlemarker\"\n    },\n    options: {\n      stroke: !0,\n      color: \"#3388ff\",\n      weight: 4,\n      opacity: .5,\n      fill: !0,\n      fillColor: null,\n      fillOpacity: .2,\n      clickable: !0,\n      zIndexOffset: 2e3\n    },\n    initialize: function (t, e) {\n      this.type = L.Draw.CircleMarker.TYPE, this._initialLabelText = L.drawLocal.draw.handlers.circlemarker.tooltip.start, L.Draw.Feature.prototype.initialize.call(this, t, e);\n    },\n    _fireCreatedEvent: function () {\n      var t = new L.CircleMarker(this._marker.getLatLng(), this.options);\n\n      L.Draw.Feature.prototype._fireCreatedEvent.call(this, t);\n    },\n    _createMarker: function (t) {\n      return new L.CircleMarker(t, this.options);\n    }\n  }), L.Draw.Circle = L.Draw.SimpleShape.extend({\n    statics: {\n      TYPE: \"circle\"\n    },\n    options: {\n      shapeOptions: {\n        stroke: !0,\n        color: \"#3388ff\",\n        weight: 4,\n        opacity: .5,\n        fill: !0,\n        fillColor: null,\n        fillOpacity: .2,\n        clickable: !0\n      },\n      showRadius: !0,\n      metric: !0,\n      feet: !0,\n      nautic: !1\n    },\n    initialize: function (t, e) {\n      this.type = L.Draw.Circle.TYPE, this._initialLabelText = L.drawLocal.draw.handlers.circle.tooltip.start, L.Draw.SimpleShape.prototype.initialize.call(this, t, e);\n    },\n    _drawShape: function (t) {\n      if (L.GeometryUtil.isVersion07x()) var e = this._startLatLng.distanceTo(t);else var e = this._map.distance(this._startLatLng, t);\n      this._shape ? this._shape.setRadius(e) : (this._shape = new L.Circle(this._startLatLng, e, this.options.shapeOptions), this._map.addLayer(this._shape));\n    },\n    _fireCreatedEvent: function () {\n      var t = new L.Circle(this._startLatLng, this._shape.getRadius(), this.options.shapeOptions);\n\n      L.Draw.SimpleShape.prototype._fireCreatedEvent.call(this, t);\n    },\n    _onMouseMove: function (t) {\n      var e,\n          i = t.latlng,\n          o = this.options.showRadius,\n          a = this.options.metric;\n\n      if (this._tooltip.updatePosition(i), this._isDrawing) {\n        this._drawShape(i), e = this._shape.getRadius().toFixed(1);\n        var n = \"\";\n        o && (n = L.drawLocal.draw.handlers.circle.radius + \": \" + L.GeometryUtil.readableDistance(e, a, this.options.feet, this.options.nautic)), this._tooltip.updateContent({\n          text: this._endLabelText,\n          subtext: n\n        });\n      }\n    }\n  }), L.Edit = L.Edit || {}, L.Edit.Marker = L.Handler.extend({\n    initialize: function (t, e) {\n      this._marker = t, L.setOptions(this, e);\n    },\n    addHooks: function () {\n      var t = this._marker;\n      t.dragging.enable(), t.on(\"dragend\", this._onDragEnd, t), this._toggleMarkerHighlight();\n    },\n    removeHooks: function () {\n      var t = this._marker;\n      t.dragging.disable(), t.off(\"dragend\", this._onDragEnd, t), this._toggleMarkerHighlight();\n    },\n    _onDragEnd: function (t) {\n      var e = t.target;\n      e.edited = !0, this._map.fire(L.Draw.Event.EDITMOVE, {\n        layer: e\n      });\n    },\n    _toggleMarkerHighlight: function () {\n      var t = this._marker._icon;\n      t && (t.style.display = \"none\", L.DomUtil.hasClass(t, \"leaflet-edit-marker-selected\") ? (L.DomUtil.removeClass(t, \"leaflet-edit-marker-selected\"), this._offsetMarker(t, -4)) : (L.DomUtil.addClass(t, \"leaflet-edit-marker-selected\"), this._offsetMarker(t, 4)), t.style.display = \"\");\n    },\n    _offsetMarker: function (t, e) {\n      var i = parseInt(t.style.marginTop, 10) - e,\n          o = parseInt(t.style.marginLeft, 10) - e;\n      t.style.marginTop = i + \"px\", t.style.marginLeft = o + \"px\";\n    }\n  }), L.Marker.addInitHook(function () {\n    L.Edit.Marker && (this.editing = new L.Edit.Marker(this), this.options.editable && this.editing.enable());\n  }), L.Edit = L.Edit || {}, L.Edit.Poly = L.Handler.extend({\n    initialize: function (t) {\n      this.latlngs = [t._latlngs], t._holes && (this.latlngs = this.latlngs.concat(t._holes)), this._poly = t, this._poly.on(\"revert-edited\", this._updateLatLngs, this);\n    },\n    _defaultShape: function () {\n      return L.Polyline._flat ? L.Polyline._flat(this._poly._latlngs) ? this._poly._latlngs : this._poly._latlngs[0] : this._poly._latlngs;\n    },\n    _eachVertexHandler: function (t) {\n      for (var e = 0; e < this._verticesHandlers.length; e++) t(this._verticesHandlers[e]);\n    },\n    addHooks: function () {\n      this._initHandlers(), this._eachVertexHandler(function (t) {\n        t.addHooks();\n      });\n    },\n    removeHooks: function () {\n      this._eachVertexHandler(function (t) {\n        t.removeHooks();\n      });\n    },\n    updateMarkers: function () {\n      this._eachVertexHandler(function (t) {\n        t.updateMarkers();\n      });\n    },\n    _initHandlers: function () {\n      this._verticesHandlers = [];\n\n      for (var t = 0; t < this.latlngs.length; t++) this._verticesHandlers.push(new L.Edit.PolyVerticesEdit(this._poly, this.latlngs[t], this._poly.options.poly));\n    },\n    _updateLatLngs: function (t) {\n      this.latlngs = [t.layer._latlngs], t.layer._holes && (this.latlngs = this.latlngs.concat(t.layer._holes));\n    }\n  }), L.Edit.PolyVerticesEdit = L.Handler.extend({\n    options: {\n      icon: new L.DivIcon({\n        iconSize: new L.Point(8, 8),\n        className: \"leaflet-div-icon leaflet-editing-icon\"\n      }),\n      touchIcon: new L.DivIcon({\n        iconSize: new L.Point(20, 20),\n        className: \"leaflet-div-icon leaflet-editing-icon leaflet-touch-icon\"\n      }),\n      drawError: {\n        color: \"#b00b00\",\n        timeout: 1e3\n      }\n    },\n    initialize: function (t, e, i) {\n      L.Browser.touch && (this.options.icon = this.options.touchIcon), this._poly = t, i && i.drawError && (i.drawError = L.Util.extend({}, this.options.drawError, i.drawError)), this._latlngs = e, L.setOptions(this, i);\n    },\n    _defaultShape: function () {\n      return L.Polyline._flat ? L.Polyline._flat(this._latlngs) ? this._latlngs : this._latlngs[0] : this._latlngs;\n    },\n    addHooks: function () {\n      var t = this._poly,\n          e = t._path;\n      t instanceof L.Polygon || (t.options.fill = !1, t.options.editing && (t.options.editing.fill = !1)), e && t.options.editing && t.options.editing.className && (t.options.original.className && t.options.original.className.split(\" \").forEach(function (t) {\n        L.DomUtil.removeClass(e, t);\n      }), t.options.editing.className.split(\" \").forEach(function (t) {\n        L.DomUtil.addClass(e, t);\n      })), t.setStyle(t.options.editing), this._poly._map && (this._map = this._poly._map, this._markerGroup || this._initMarkers(), this._poly._map.addLayer(this._markerGroup));\n    },\n    removeHooks: function () {\n      var t = this._poly,\n          e = t._path;\n      e && t.options.editing && t.options.editing.className && (t.options.editing.className.split(\" \").forEach(function (t) {\n        L.DomUtil.removeClass(e, t);\n      }), t.options.original.className && t.options.original.className.split(\" \").forEach(function (t) {\n        L.DomUtil.addClass(e, t);\n      })), t.setStyle(t.options.original), t._map && (t._map.removeLayer(this._markerGroup), delete this._markerGroup, delete this._markers);\n    },\n    updateMarkers: function () {\n      this._markerGroup.clearLayers(), this._initMarkers();\n    },\n    _initMarkers: function () {\n      this._markerGroup || (this._markerGroup = new L.LayerGroup()), this._markers = [];\n\n      var t,\n          e,\n          i,\n          o,\n          a = this._defaultShape();\n\n      for (t = 0, i = a.length; t < i; t++) o = this._createMarker(a[t], t), o.on(\"click\", this._onMarkerClick, this), o.on(\"contextmenu\", this._onContextMenu, this), this._markers.push(o);\n\n      var n, s;\n\n      for (t = 0, e = i - 1; t < i; e = t++) (0 !== t || L.Polygon && this._poly instanceof L.Polygon) && (n = this._markers[e], s = this._markers[t], this._createMiddleMarker(n, s), this._updatePrevNext(n, s));\n    },\n    _createMarker: function (t, e) {\n      var i = new L.Marker.Touch(t, {\n        draggable: !0,\n        icon: this.options.icon\n      });\n      return i._origLatLng = t, i._index = e, i.on(\"dragstart\", this._onMarkerDragStart, this).on(\"drag\", this._onMarkerDrag, this).on(\"dragend\", this._fireEdit, this).on(\"touchmove\", this._onTouchMove, this).on(\"touchend\", this._fireEdit, this).on(\"MSPointerMove\", this._onTouchMove, this).on(\"MSPointerUp\", this._fireEdit, this), this._markerGroup.addLayer(i), i;\n    },\n    _onMarkerDragStart: function () {\n      this._poly.fire(\"editstart\");\n    },\n    _spliceLatLngs: function () {\n      var t = this._defaultShape(),\n          e = [].splice.apply(t, arguments);\n\n      return this._poly._convertLatLngs(t, !0), this._poly.redraw(), e;\n    },\n    _removeMarker: function (t) {\n      var e = t._index;\n      this._markerGroup.removeLayer(t), this._markers.splice(e, 1), this._spliceLatLngs(e, 1), this._updateIndexes(e, -1), t.off(\"dragstart\", this._onMarkerDragStart, this).off(\"drag\", this._onMarkerDrag, this).off(\"dragend\", this._fireEdit, this).off(\"touchmove\", this._onMarkerDrag, this).off(\"touchend\", this._fireEdit, this).off(\"click\", this._onMarkerClick, this).off(\"MSPointerMove\", this._onTouchMove, this).off(\"MSPointerUp\", this._fireEdit, this);\n    },\n    _fireEdit: function () {\n      this._poly.edited = !0, this._poly.fire(\"edit\"), this._poly._map.fire(L.Draw.Event.EDITVERTEX, {\n        layers: this._markerGroup,\n        poly: this._poly\n      });\n    },\n    _onMarkerDrag: function (t) {\n      var e = t.target,\n          i = this._poly,\n          o = L.LatLngUtil.cloneLatLng(e._origLatLng);\n\n      if (L.extend(e._origLatLng, e._latlng), i.options.poly) {\n        var a = i._map._editTooltip;\n\n        if (!i.options.poly.allowIntersection && i.intersects()) {\n          L.extend(e._origLatLng, o), e.setLatLng(o);\n          var n = i.options.color;\n          i.setStyle({\n            color: this.options.drawError.color\n          }), a && a.updateContent({\n            text: L.drawLocal.draw.handlers.polyline.error\n          }), setTimeout(function () {\n            i.setStyle({\n              color: n\n            }), a && a.updateContent({\n              text: L.drawLocal.edit.handlers.edit.tooltip.text,\n              subtext: L.drawLocal.edit.handlers.edit.tooltip.subtext\n            });\n          }, 1e3);\n        }\n      }\n\n      e._middleLeft && e._middleLeft.setLatLng(this._getMiddleLatLng(e._prev, e)), e._middleRight && e._middleRight.setLatLng(this._getMiddleLatLng(e, e._next)), this._poly._bounds._southWest = L.latLng(1 / 0, 1 / 0), this._poly._bounds._northEast = L.latLng(-1 / 0, -1 / 0);\n\n      var s = this._poly.getLatLngs();\n\n      this._poly._convertLatLngs(s, !0), this._poly.redraw(), this._poly.fire(\"editdrag\");\n    },\n    _onMarkerClick: function (t) {\n      var e = L.Polygon && this._poly instanceof L.Polygon ? 4 : 3,\n          i = t.target;\n      this._defaultShape().length < e || (this._removeMarker(i), this._updatePrevNext(i._prev, i._next), i._middleLeft && this._markerGroup.removeLayer(i._middleLeft), i._middleRight && this._markerGroup.removeLayer(i._middleRight), i._prev && i._next ? this._createMiddleMarker(i._prev, i._next) : i._prev ? i._next || (i._prev._middleRight = null) : i._next._middleLeft = null, this._fireEdit());\n    },\n    _onContextMenu: function (t) {\n      var e = t.target;\n      this._poly;\n      this._poly._map.fire(L.Draw.Event.MARKERCONTEXT, {\n        marker: e,\n        layers: this._markerGroup,\n        poly: this._poly\n      }), L.DomEvent.stopPropagation;\n    },\n    _onTouchMove: function (t) {\n      var e = this._map.mouseEventToLayerPoint(t.originalEvent.touches[0]),\n          i = this._map.layerPointToLatLng(e),\n          o = t.target;\n\n      L.extend(o._origLatLng, i), o._middleLeft && o._middleLeft.setLatLng(this._getMiddleLatLng(o._prev, o)), o._middleRight && o._middleRight.setLatLng(this._getMiddleLatLng(o, o._next)), this._poly.redraw(), this.updateMarkers();\n    },\n    _updateIndexes: function (t, e) {\n      this._markerGroup.eachLayer(function (i) {\n        i._index > t && (i._index += e);\n      });\n    },\n    _createMiddleMarker: function (t, e) {\n      var i,\n          o,\n          a,\n          n = this._getMiddleLatLng(t, e),\n          s = this._createMarker(n);\n\n      s.setOpacity(.6), t._middleRight = e._middleLeft = s, o = function () {\n        s.off(\"touchmove\", o, this);\n        var a = e._index;\n        s._index = a, s.off(\"click\", i, this).on(\"click\", this._onMarkerClick, this), n.lat = s.getLatLng().lat, n.lng = s.getLatLng().lng, this._spliceLatLngs(a, 0, n), this._markers.splice(a, 0, s), s.setOpacity(1), this._updateIndexes(a, 1), e._index++, this._updatePrevNext(t, s), this._updatePrevNext(s, e), this._poly.fire(\"editstart\");\n      }, a = function () {\n        s.off(\"dragstart\", o, this), s.off(\"dragend\", a, this), s.off(\"touchmove\", o, this), this._createMiddleMarker(t, s), this._createMiddleMarker(s, e);\n      }, i = function () {\n        o.call(this), a.call(this), this._fireEdit();\n      }, s.on(\"click\", i, this).on(\"dragstart\", o, this).on(\"dragend\", a, this).on(\"touchmove\", o, this), this._markerGroup.addLayer(s);\n    },\n    _updatePrevNext: function (t, e) {\n      t && (t._next = e), e && (e._prev = t);\n    },\n    _getMiddleLatLng: function (t, e) {\n      var i = this._poly._map,\n          o = i.project(t.getLatLng()),\n          a = i.project(e.getLatLng());\n      return i.unproject(o._add(a)._divideBy(2));\n    }\n  }), L.Polyline.addInitHook(function () {\n    this.editing || (L.Edit.Poly && (this.editing = new L.Edit.Poly(this), this.options.editable && this.editing.enable()), this.on(\"add\", function () {\n      this.editing && this.editing.enabled() && this.editing.addHooks();\n    }), this.on(\"remove\", function () {\n      this.editing && this.editing.enabled() && this.editing.removeHooks();\n    }));\n  }), L.Edit = L.Edit || {}, L.Edit.SimpleShape = L.Handler.extend({\n    options: {\n      moveIcon: new L.DivIcon({\n        iconSize: new L.Point(8, 8),\n        className: \"leaflet-div-icon leaflet-editing-icon leaflet-edit-move\"\n      }),\n      resizeIcon: new L.DivIcon({\n        iconSize: new L.Point(8, 8),\n        className: \"leaflet-div-icon leaflet-editing-icon leaflet-edit-resize\"\n      }),\n      touchMoveIcon: new L.DivIcon({\n        iconSize: new L.Point(20, 20),\n        className: \"leaflet-div-icon leaflet-editing-icon leaflet-edit-move leaflet-touch-icon\"\n      }),\n      touchResizeIcon: new L.DivIcon({\n        iconSize: new L.Point(20, 20),\n        className: \"leaflet-div-icon leaflet-editing-icon leaflet-edit-resize leaflet-touch-icon\"\n      })\n    },\n    initialize: function (t, e) {\n      L.Browser.touch && (this.options.moveIcon = this.options.touchMoveIcon, this.options.resizeIcon = this.options.touchResizeIcon), this._shape = t, L.Util.setOptions(this, e);\n    },\n    addHooks: function () {\n      var t = this._shape;\n      this._shape._map && (this._map = this._shape._map, t.setStyle(t.options.editing), t._map && (this._map = t._map, this._markerGroup || this._initMarkers(), this._map.addLayer(this._markerGroup)));\n    },\n    removeHooks: function () {\n      var t = this._shape;\n\n      if (t.setStyle(t.options.original), t._map) {\n        this._unbindMarker(this._moveMarker);\n\n        for (var e = 0, i = this._resizeMarkers.length; e < i; e++) this._unbindMarker(this._resizeMarkers[e]);\n\n        this._resizeMarkers = null, this._map.removeLayer(this._markerGroup), delete this._markerGroup;\n      }\n\n      this._map = null;\n    },\n    updateMarkers: function () {\n      this._markerGroup.clearLayers(), this._initMarkers();\n    },\n    _initMarkers: function () {\n      this._markerGroup || (this._markerGroup = new L.LayerGroup()), this._createMoveMarker(), this._createResizeMarker();\n    },\n    _createMoveMarker: function () {},\n    _createResizeMarker: function () {},\n    _createMarker: function (t, e) {\n      var i = new L.Marker.Touch(t, {\n        draggable: !0,\n        icon: e,\n        zIndexOffset: 10\n      });\n      return this._bindMarker(i), this._markerGroup.addLayer(i), i;\n    },\n    _bindMarker: function (t) {\n      t.on(\"dragstart\", this._onMarkerDragStart, this).on(\"drag\", this._onMarkerDrag, this).on(\"dragend\", this._onMarkerDragEnd, this).on(\"touchstart\", this._onTouchStart, this).on(\"touchmove\", this._onTouchMove, this).on(\"MSPointerMove\", this._onTouchMove, this).on(\"touchend\", this._onTouchEnd, this).on(\"MSPointerUp\", this._onTouchEnd, this);\n    },\n    _unbindMarker: function (t) {\n      t.off(\"dragstart\", this._onMarkerDragStart, this).off(\"drag\", this._onMarkerDrag, this).off(\"dragend\", this._onMarkerDragEnd, this).off(\"touchstart\", this._onTouchStart, this).off(\"touchmove\", this._onTouchMove, this).off(\"MSPointerMove\", this._onTouchMove, this).off(\"touchend\", this._onTouchEnd, this).off(\"MSPointerUp\", this._onTouchEnd, this);\n    },\n    _onMarkerDragStart: function (t) {\n      t.target.setOpacity(0), this._shape.fire(\"editstart\");\n    },\n    _fireEdit: function () {\n      this._shape.edited = !0, this._shape.fire(\"edit\");\n    },\n    _onMarkerDrag: function (t) {\n      var e = t.target,\n          i = e.getLatLng();\n      e === this._moveMarker ? this._move(i) : this._resize(i), this._shape.redraw(), this._shape.fire(\"editdrag\");\n    },\n    _onMarkerDragEnd: function (t) {\n      t.target.setOpacity(1), this._fireEdit();\n    },\n    _onTouchStart: function (t) {\n      if (L.Edit.SimpleShape.prototype._onMarkerDragStart.call(this, t), \"function\" == typeof this._getCorners) {\n        var e = this._getCorners(),\n            i = t.target,\n            o = i._cornerIndex;\n\n        i.setOpacity(0), this._oppositeCorner = e[(o + 2) % 4], this._toggleCornerMarkers(0, o);\n      }\n\n      this._shape.fire(\"editstart\");\n    },\n    _onTouchMove: function (t) {\n      var e = this._map.mouseEventToLayerPoint(t.originalEvent.touches[0]),\n          i = this._map.layerPointToLatLng(e);\n\n      return t.target === this._moveMarker ? this._move(i) : this._resize(i), this._shape.redraw(), !1;\n    },\n    _onTouchEnd: function (t) {\n      t.target.setOpacity(1), this.updateMarkers(), this._fireEdit();\n    },\n    _move: function () {},\n    _resize: function () {}\n  }), L.Edit = L.Edit || {}, L.Edit.Rectangle = L.Edit.SimpleShape.extend({\n    _createMoveMarker: function () {\n      var t = this._shape.getBounds(),\n          e = t.getCenter();\n\n      this._moveMarker = this._createMarker(e, this.options.moveIcon);\n    },\n    _createResizeMarker: function () {\n      var t = this._getCorners();\n\n      this._resizeMarkers = [];\n\n      for (var e = 0, i = t.length; e < i; e++) this._resizeMarkers.push(this._createMarker(t[e], this.options.resizeIcon)), this._resizeMarkers[e]._cornerIndex = e;\n    },\n    _onMarkerDragStart: function (t) {\n      L.Edit.SimpleShape.prototype._onMarkerDragStart.call(this, t);\n\n      var e = this._getCorners(),\n          i = t.target,\n          o = i._cornerIndex;\n\n      this._oppositeCorner = e[(o + 2) % 4], this._toggleCornerMarkers(0, o);\n    },\n    _onMarkerDragEnd: function (t) {\n      var e,\n          i,\n          o = t.target;\n      o === this._moveMarker && (e = this._shape.getBounds(), i = e.getCenter(), o.setLatLng(i)), this._toggleCornerMarkers(1), this._repositionCornerMarkers(), L.Edit.SimpleShape.prototype._onMarkerDragEnd.call(this, t);\n    },\n    _move: function (t) {\n      for (var e, i = this._shape._defaultShape ? this._shape._defaultShape() : this._shape.getLatLngs(), o = this._shape.getBounds(), a = o.getCenter(), n = [], s = 0, r = i.length; s < r; s++) e = [i[s].lat - a.lat, i[s].lng - a.lng], n.push([t.lat + e[0], t.lng + e[1]]);\n\n      this._shape.setLatLngs(n), this._repositionCornerMarkers(), this._map.fire(L.Draw.Event.EDITMOVE, {\n        layer: this._shape\n      });\n    },\n    _resize: function (t) {\n      var e;\n      this._shape.setBounds(L.latLngBounds(t, this._oppositeCorner)), e = this._shape.getBounds(), this._moveMarker.setLatLng(e.getCenter()), this._map.fire(L.Draw.Event.EDITRESIZE, {\n        layer: this._shape\n      });\n    },\n    _getCorners: function () {\n      var t = this._shape.getBounds();\n\n      return [t.getNorthWest(), t.getNorthEast(), t.getSouthEast(), t.getSouthWest()];\n    },\n    _toggleCornerMarkers: function (t) {\n      for (var e = 0, i = this._resizeMarkers.length; e < i; e++) this._resizeMarkers[e].setOpacity(t);\n    },\n    _repositionCornerMarkers: function () {\n      for (var t = this._getCorners(), e = 0, i = this._resizeMarkers.length; e < i; e++) this._resizeMarkers[e].setLatLng(t[e]);\n    }\n  }), L.Rectangle.addInitHook(function () {\n    L.Edit.Rectangle && (this.editing = new L.Edit.Rectangle(this), this.options.editable && this.editing.enable());\n  }), L.Edit = L.Edit || {}, L.Edit.CircleMarker = L.Edit.SimpleShape.extend({\n    _createMoveMarker: function () {\n      var t = this._shape.getLatLng();\n\n      this._moveMarker = this._createMarker(t, this.options.moveIcon);\n    },\n    _createResizeMarker: function () {\n      this._resizeMarkers = [];\n    },\n    _move: function (t) {\n      if (this._resizeMarkers.length) {\n        var e = this._getResizeMarkerPoint(t);\n\n        this._resizeMarkers[0].setLatLng(e);\n      }\n\n      this._shape.setLatLng(t), this._map.fire(L.Draw.Event.EDITMOVE, {\n        layer: this._shape\n      });\n    }\n  }), L.CircleMarker.addInitHook(function () {\n    L.Edit.CircleMarker && (this.editing = new L.Edit.CircleMarker(this), this.options.editable && this.editing.enable()), this.on(\"add\", function () {\n      this.editing && this.editing.enabled() && this.editing.addHooks();\n    }), this.on(\"remove\", function () {\n      this.editing && this.editing.enabled() && this.editing.removeHooks();\n    });\n  }), L.Edit = L.Edit || {}, L.Edit.Circle = L.Edit.CircleMarker.extend({\n    _createResizeMarker: function () {\n      var t = this._shape.getLatLng(),\n          e = this._getResizeMarkerPoint(t);\n\n      this._resizeMarkers = [], this._resizeMarkers.push(this._createMarker(e, this.options.resizeIcon));\n    },\n    _getResizeMarkerPoint: function (t) {\n      var e = this._shape._radius * Math.cos(Math.PI / 4),\n          i = this._map.project(t);\n\n      return this._map.unproject([i.x + e, i.y - e]);\n    },\n    _resize: function (t) {\n      var e = this._moveMarker.getLatLng();\n\n      L.GeometryUtil.isVersion07x() ? radius = e.distanceTo(t) : radius = this._map.distance(e, t), this._shape.setRadius(radius), this._map.editTooltip && this._map._editTooltip.updateContent({\n        text: L.drawLocal.edit.handlers.edit.tooltip.subtext + \"<br />\" + L.drawLocal.edit.handlers.edit.tooltip.text,\n        subtext: L.drawLocal.draw.handlers.circle.radius + \": \" + L.GeometryUtil.readableDistance(radius, !0, this.options.feet, this.options.nautic)\n      }), this._shape.setRadius(radius), this._map.fire(L.Draw.Event.EDITRESIZE, {\n        layer: this._shape\n      });\n    }\n  }), L.Circle.addInitHook(function () {\n    L.Edit.Circle && (this.editing = new L.Edit.Circle(this), this.options.editable && this.editing.enable());\n  }), L.Map.mergeOptions({\n    touchExtend: !0\n  }), L.Map.TouchExtend = L.Handler.extend({\n    initialize: function (t) {\n      this._map = t, this._container = t._container, this._pane = t._panes.overlayPane;\n    },\n    addHooks: function () {\n      L.DomEvent.on(this._container, \"touchstart\", this._onTouchStart, this), L.DomEvent.on(this._container, \"touchend\", this._onTouchEnd, this), L.DomEvent.on(this._container, \"touchmove\", this._onTouchMove, this), this._detectIE() ? (L.DomEvent.on(this._container, \"MSPointerDown\", this._onTouchStart, this), L.DomEvent.on(this._container, \"MSPointerUp\", this._onTouchEnd, this), L.DomEvent.on(this._container, \"MSPointerMove\", this._onTouchMove, this), L.DomEvent.on(this._container, \"MSPointerCancel\", this._onTouchCancel, this)) : (L.DomEvent.on(this._container, \"touchcancel\", this._onTouchCancel, this), L.DomEvent.on(this._container, \"touchleave\", this._onTouchLeave, this));\n    },\n    removeHooks: function () {\n      L.DomEvent.off(this._container, \"touchstart\", this._onTouchStart, this), L.DomEvent.off(this._container, \"touchend\", this._onTouchEnd, this), L.DomEvent.off(this._container, \"touchmove\", this._onTouchMove, this), this._detectIE() ? (L.DomEvent.off(this._container, \"MSPointerDown\", this._onTouchStart, this), L.DomEvent.off(this._container, \"MSPointerUp\", this._onTouchEnd, this), L.DomEvent.off(this._container, \"MSPointerMove\", this._onTouchMove, this), L.DomEvent.off(this._container, \"MSPointerCancel\", this._onTouchCancel, this)) : (L.DomEvent.off(this._container, \"touchcancel\", this._onTouchCancel, this), L.DomEvent.off(this._container, \"touchleave\", this._onTouchLeave, this));\n    },\n    _touchEvent: function (t, e) {\n      var i = {};\n\n      if (void 0 !== t.touches) {\n        if (!t.touches.length) return;\n        i = t.touches[0];\n      } else {\n        if (\"touch\" !== t.pointerType) return;\n        if (i = t, !this._filterClick(t)) return;\n      }\n\n      var o = this._map.mouseEventToContainerPoint(i),\n          a = this._map.mouseEventToLayerPoint(i),\n          n = this._map.layerPointToLatLng(a);\n\n      this._map.fire(e, {\n        latlng: n,\n        layerPoint: a,\n        containerPoint: o,\n        pageX: i.pageX,\n        pageY: i.pageY,\n        originalEvent: t\n      });\n    },\n    _filterClick: function (t) {\n      var e = t.timeStamp || t.originalEvent.timeStamp,\n          i = L.DomEvent._lastClick && e - L.DomEvent._lastClick;\n      return i && i > 100 && i < 500 || t.target._simulatedClick && !t._simulated ? (L.DomEvent.stop(t), !1) : (L.DomEvent._lastClick = e, !0);\n    },\n    _onTouchStart: function (t) {\n      if (this._map._loaded) {\n        this._touchEvent(t, \"touchstart\");\n      }\n    },\n    _onTouchEnd: function (t) {\n      if (this._map._loaded) {\n        this._touchEvent(t, \"touchend\");\n      }\n    },\n    _onTouchCancel: function (t) {\n      if (this._map._loaded) {\n        var e = \"touchcancel\";\n        this._detectIE() && (e = \"pointercancel\"), this._touchEvent(t, e);\n      }\n    },\n    _onTouchLeave: function (t) {\n      if (this._map._loaded) {\n        this._touchEvent(t, \"touchleave\");\n      }\n    },\n    _onTouchMove: function (t) {\n      if (this._map._loaded) {\n        this._touchEvent(t, \"touchmove\");\n      }\n    },\n    _detectIE: function () {\n      var e = t.navigator.userAgent,\n          i = e.indexOf(\"MSIE \");\n      if (i > 0) return parseInt(e.substring(i + 5, e.indexOf(\".\", i)), 10);\n\n      if (e.indexOf(\"Trident/\") > 0) {\n        var o = e.indexOf(\"rv:\");\n        return parseInt(e.substring(o + 3, e.indexOf(\".\", o)), 10);\n      }\n\n      var a = e.indexOf(\"Edge/\");\n      return a > 0 && parseInt(e.substring(a + 5, e.indexOf(\".\", a)), 10);\n    }\n  }), L.Map.addInitHook(\"addHandler\", \"touchExtend\", L.Map.TouchExtend), L.Marker.Touch = L.Marker.extend({\n    _initInteraction: function () {\n      return this.addInteractiveTarget ? L.Marker.prototype._initInteraction.apply(this) : this._initInteractionLegacy();\n    },\n    _initInteractionLegacy: function () {\n      if (this.options.clickable) {\n        var t = this._icon,\n            e = [\"dblclick\", \"mousedown\", \"mouseover\", \"mouseout\", \"contextmenu\", \"touchstart\", \"touchend\", \"touchmove\"];\n        this._detectIE ? e.concat([\"MSPointerDown\", \"MSPointerUp\", \"MSPointerMove\", \"MSPointerCancel\"]) : e.concat([\"touchcancel\"]), L.DomUtil.addClass(t, \"leaflet-clickable\"), L.DomEvent.on(t, \"click\", this._onMouseClick, this), L.DomEvent.on(t, \"keypress\", this._onKeyPress, this);\n\n        for (var i = 0; i < e.length; i++) L.DomEvent.on(t, e[i], this._fireMouseEvent, this);\n\n        L.Handler.MarkerDrag && (this.dragging = new L.Handler.MarkerDrag(this), this.options.draggable && this.dragging.enable());\n      }\n    },\n    _detectIE: function () {\n      var e = t.navigator.userAgent,\n          i = e.indexOf(\"MSIE \");\n      if (i > 0) return parseInt(e.substring(i + 5, e.indexOf(\".\", i)), 10);\n\n      if (e.indexOf(\"Trident/\") > 0) {\n        var o = e.indexOf(\"rv:\");\n        return parseInt(e.substring(o + 3, e.indexOf(\".\", o)), 10);\n      }\n\n      var a = e.indexOf(\"Edge/\");\n      return a > 0 && parseInt(e.substring(a + 5, e.indexOf(\".\", a)), 10);\n    }\n  }), L.LatLngUtil = {\n    cloneLatLngs: function (t) {\n      for (var e = [], i = 0, o = t.length; i < o; i++) Array.isArray(t[i]) ? e.push(L.LatLngUtil.cloneLatLngs(t[i])) : e.push(this.cloneLatLng(t[i]));\n\n      return e;\n    },\n    cloneLatLng: function (t) {\n      return L.latLng(t.lat, t.lng);\n    }\n  }, function () {\n    var t = {\n      km: 2,\n      ha: 2,\n      m: 0,\n      mi: 2,\n      ac: 2,\n      yd: 0,\n      ft: 0,\n      nm: 2\n    };\n    L.GeometryUtil = L.extend(L.GeometryUtil || {}, {\n      geodesicArea: function (t) {\n        var e,\n            i,\n            o = t.length,\n            a = 0,\n            n = Math.PI / 180;\n\n        if (o > 2) {\n          for (var s = 0; s < o; s++) e = t[s], i = t[(s + 1) % o], a += (i.lng - e.lng) * n * (2 + Math.sin(e.lat * n) + Math.sin(i.lat * n));\n\n          a = 6378137 * a * 6378137 / 2;\n        }\n\n        return Math.abs(a);\n      },\n      formattedNumber: function (t, e) {\n        var i = parseFloat(t).toFixed(e),\n            o = L.drawLocal.format && L.drawLocal.format.numeric,\n            a = o && o.delimiters,\n            n = a && a.thousands,\n            s = a && a.decimal;\n\n        if (n || s) {\n          var r = i.split(\".\");\n          i = n ? r[0].replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1\" + n) : r[0], s = s || \".\", r.length > 1 && (i = i + s + r[1]);\n        }\n\n        return i;\n      },\n      readableArea: function (e, i, o) {\n        var a,\n            n,\n            o = L.Util.extend({}, t, o);\n        return i ? (n = [\"ha\", \"m\"], type = typeof i, \"string\" === type ? n = [i] : \"boolean\" !== type && (n = i), a = e >= 1e6 && -1 !== n.indexOf(\"km\") ? L.GeometryUtil.formattedNumber(1e-6 * e, o.km) + \" km²\" : e >= 1e4 && -1 !== n.indexOf(\"ha\") ? L.GeometryUtil.formattedNumber(1e-4 * e, o.ha) + \" ha\" : L.GeometryUtil.formattedNumber(e, o.m) + \" m²\") : (e /= .836127, a = e >= 3097600 ? L.GeometryUtil.formattedNumber(e / 3097600, o.mi) + \" mi²\" : e >= 4840 ? L.GeometryUtil.formattedNumber(e / 4840, o.ac) + \" acres\" : L.GeometryUtil.formattedNumber(e, o.yd) + \" yd²\"), a;\n      },\n      readableDistance: function (e, i, o, a, n) {\n        var s,\n            n = L.Util.extend({}, t, n);\n\n        switch (i ? \"string\" == typeof i ? i : \"metric\" : o ? \"feet\" : a ? \"nauticalMile\" : \"yards\") {\n          case \"metric\":\n            s = e > 1e3 ? L.GeometryUtil.formattedNumber(e / 1e3, n.km) + \" km\" : L.GeometryUtil.formattedNumber(e, n.m) + \" m\";\n            break;\n\n          case \"feet\":\n            e *= 3.28083, s = L.GeometryUtil.formattedNumber(e, n.ft) + \" ft\";\n            break;\n\n          case \"nauticalMile\":\n            e *= .53996, s = L.GeometryUtil.formattedNumber(e / 1e3, n.nm) + \" nm\";\n            break;\n\n          case \"yards\":\n          default:\n            e *= 1.09361, s = e > 1760 ? L.GeometryUtil.formattedNumber(e / 1760, n.mi) + \" miles\" : L.GeometryUtil.formattedNumber(e, n.yd) + \" yd\";\n        }\n\n        return s;\n      },\n      isVersion07x: function () {\n        var t = L.version.split(\".\");\n        return 0 === parseInt(t[0], 10) && 7 === parseInt(t[1], 10);\n      }\n    });\n  }(), L.Util.extend(L.LineUtil, {\n    segmentsIntersect: function (t, e, i, o) {\n      return this._checkCounterclockwise(t, i, o) !== this._checkCounterclockwise(e, i, o) && this._checkCounterclockwise(t, e, i) !== this._checkCounterclockwise(t, e, o);\n    },\n    _checkCounterclockwise: function (t, e, i) {\n      return (i.y - t.y) * (e.x - t.x) > (e.y - t.y) * (i.x - t.x);\n    }\n  }), L.Polyline.include({\n    intersects: function () {\n      var t,\n          e,\n          i,\n          o = this._getProjectedPoints(),\n          a = o ? o.length : 0;\n\n      if (this._tooFewPointsForIntersection()) return !1;\n\n      for (t = a - 1; t >= 3; t--) if (e = o[t - 1], i = o[t], this._lineSegmentsIntersectsRange(e, i, t - 2)) return !0;\n\n      return !1;\n    },\n    newLatLngIntersects: function (t, e) {\n      return !!this._map && this.newPointIntersects(this._map.latLngToLayerPoint(t), e);\n    },\n    newPointIntersects: function (t, e) {\n      var i = this._getProjectedPoints(),\n          o = i ? i.length : 0,\n          a = i ? i[o - 1] : null,\n          n = o - 2;\n\n      return !this._tooFewPointsForIntersection(1) && this._lineSegmentsIntersectsRange(a, t, n, e ? 1 : 0);\n    },\n    _tooFewPointsForIntersection: function (t) {\n      var e = this._getProjectedPoints(),\n          i = e ? e.length : 0;\n\n      return i += t || 0, !e || i <= 3;\n    },\n    _lineSegmentsIntersectsRange: function (t, e, i, o) {\n      var a,\n          n,\n          s = this._getProjectedPoints();\n\n      o = o || 0;\n\n      for (var r = i; r > o; r--) if (a = s[r - 1], n = s[r], L.LineUtil.segmentsIntersect(t, e, a, n)) return !0;\n\n      return !1;\n    },\n    _getProjectedPoints: function () {\n      if (!this._defaultShape) return this._originalPoints;\n\n      for (var t = [], e = this._defaultShape(), i = 0; i < e.length; i++) t.push(this._map.latLngToLayerPoint(e[i]));\n\n      return t;\n    }\n  }), L.Polygon.include({\n    intersects: function () {\n      var t,\n          e,\n          i,\n          o,\n          a = this._getProjectedPoints();\n\n      return !this._tooFewPointsForIntersection() && (!!L.Polyline.prototype.intersects.call(this) || (t = a.length, e = a[0], i = a[t - 1], o = t - 2, this._lineSegmentsIntersectsRange(i, e, o, 1)));\n    }\n  }), L.Control.Draw = L.Control.extend({\n    options: {\n      position: \"topleft\",\n      draw: {},\n      edit: !1\n    },\n    initialize: function (t) {\n      if (L.version < \"0.7\") throw new Error(\"Leaflet.draw 0.2.3+ requires Leaflet 0.7.0+. Download latest from https://github.com/Leaflet/Leaflet/\");\n      L.Control.prototype.initialize.call(this, t);\n      var e;\n      this._toolbars = {}, L.DrawToolbar && this.options.draw && (e = new L.DrawToolbar(this.options.draw), this._toolbars[L.DrawToolbar.TYPE] = e, this._toolbars[L.DrawToolbar.TYPE].on(\"enable\", this._toolbarEnabled, this)), L.EditToolbar && this.options.edit && (e = new L.EditToolbar(this.options.edit), this._toolbars[L.EditToolbar.TYPE] = e, this._toolbars[L.EditToolbar.TYPE].on(\"enable\", this._toolbarEnabled, this)), L.toolbar = this;\n    },\n    onAdd: function (t) {\n      var e,\n          i = L.DomUtil.create(\"div\", \"leaflet-draw\"),\n          o = !1;\n\n      for (var a in this._toolbars) this._toolbars.hasOwnProperty(a) && (e = this._toolbars[a].addToolbar(t)) && (o || (L.DomUtil.hasClass(e, \"leaflet-draw-toolbar-top\") || L.DomUtil.addClass(e.childNodes[0], \"leaflet-draw-toolbar-top\"), o = !0), i.appendChild(e));\n\n      return i;\n    },\n    onRemove: function () {\n      for (var t in this._toolbars) this._toolbars.hasOwnProperty(t) && this._toolbars[t].removeToolbar();\n    },\n    setDrawingOptions: function (t) {\n      for (var e in this._toolbars) this._toolbars[e] instanceof L.DrawToolbar && this._toolbars[e].setOptions(t);\n    },\n    _toolbarEnabled: function (t) {\n      var e = t.target;\n\n      for (var i in this._toolbars) this._toolbars[i] !== e && this._toolbars[i].disable();\n    }\n  }), L.Map.mergeOptions({\n    drawControlTooltips: !0,\n    drawControl: !1\n  }), L.Map.addInitHook(function () {\n    this.options.drawControl && (this.drawControl = new L.Control.Draw(), this.addControl(this.drawControl));\n  }), L.Toolbar = L.Class.extend({\n    initialize: function (t) {\n      L.setOptions(this, t), this._modes = {}, this._actionButtons = [], this._activeMode = null;\n      var e = L.version.split(\".\");\n      1 === parseInt(e[0], 10) && parseInt(e[1], 10) >= 2 ? L.Toolbar.include(L.Evented.prototype) : L.Toolbar.include(L.Mixin.Events);\n    },\n    enabled: function () {\n      return null !== this._activeMode;\n    },\n    disable: function () {\n      this.enabled() && this._activeMode.handler.disable();\n    },\n    addToolbar: function (t) {\n      var e,\n          i = L.DomUtil.create(\"div\", \"leaflet-draw-section\"),\n          o = 0,\n          a = this._toolbarClass || \"\",\n          n = this.getModeHandlers(t);\n\n      for (this._toolbarContainer = L.DomUtil.create(\"div\", \"leaflet-draw-toolbar leaflet-bar\"), this._map = t, e = 0; e < n.length; e++) n[e].enabled && this._initModeHandler(n[e].handler, this._toolbarContainer, o++, a, n[e].title);\n\n      if (o) return this._lastButtonIndex = --o, this._actionsContainer = L.DomUtil.create(\"ul\", \"leaflet-draw-actions\"), i.appendChild(this._toolbarContainer), i.appendChild(this._actionsContainer), i;\n    },\n    removeToolbar: function () {\n      for (var t in this._modes) this._modes.hasOwnProperty(t) && (this._disposeButton(this._modes[t].button, this._modes[t].handler.enable, this._modes[t].handler), this._modes[t].handler.disable(), this._modes[t].handler.off(\"enabled\", this._handlerActivated, this).off(\"disabled\", this._handlerDeactivated, this));\n\n      this._modes = {};\n\n      for (var e = 0, i = this._actionButtons.length; e < i; e++) this._disposeButton(this._actionButtons[e].button, this._actionButtons[e].callback, this);\n\n      this._actionButtons = [], this._actionsContainer = null;\n    },\n    _initModeHandler: function (t, e, i, o, a) {\n      var n = t.type;\n      this._modes[n] = {}, this._modes[n].handler = t, this._modes[n].button = this._createButton({\n        type: n,\n        title: a,\n        className: o + \"-\" + n,\n        container: e,\n        callback: this._modes[n].handler.enable,\n        context: this._modes[n].handler\n      }), this._modes[n].buttonIndex = i, this._modes[n].handler.on(\"enabled\", this._handlerActivated, this).on(\"disabled\", this._handlerDeactivated, this);\n    },\n    _detectIOS: function () {\n      return /iPad|iPhone|iPod/.test(navigator.userAgent) && !t.MSStream;\n    },\n    _createButton: function (t) {\n      var e = L.DomUtil.create(\"a\", t.className || \"\", t.container),\n          i = L.DomUtil.create(\"span\", \"sr-only\", t.container);\n      e.href = \"#\", e.appendChild(i), t.title && (e.title = t.title, i.innerHTML = t.title), t.text && (e.innerHTML = t.text, i.innerHTML = t.text);\n      var o = this._detectIOS() ? \"touchstart\" : \"click\";\n      return L.DomEvent.on(e, \"click\", L.DomEvent.stopPropagation).on(e, \"mousedown\", L.DomEvent.stopPropagation).on(e, \"dblclick\", L.DomEvent.stopPropagation).on(e, \"touchstart\", L.DomEvent.stopPropagation).on(e, \"click\", L.DomEvent.preventDefault).on(e, o, t.callback, t.context), e;\n    },\n    _disposeButton: function (t, e) {\n      var i = this._detectIOS() ? \"touchstart\" : \"click\";\n      L.DomEvent.off(t, \"click\", L.DomEvent.stopPropagation).off(t, \"mousedown\", L.DomEvent.stopPropagation).off(t, \"dblclick\", L.DomEvent.stopPropagation).off(t, \"touchstart\", L.DomEvent.stopPropagation).off(t, \"click\", L.DomEvent.preventDefault).off(t, i, e);\n    },\n    _handlerActivated: function (t) {\n      this.disable(), this._activeMode = this._modes[t.handler], L.DomUtil.addClass(this._activeMode.button, \"leaflet-draw-toolbar-button-enabled\"), this._showActionsToolbar(), this.fire(\"enable\");\n    },\n    _handlerDeactivated: function () {\n      this._hideActionsToolbar(), L.DomUtil.removeClass(this._activeMode.button, \"leaflet-draw-toolbar-button-enabled\"), this._activeMode = null, this.fire(\"disable\");\n    },\n    _createActions: function (t) {\n      var e,\n          i,\n          o,\n          a,\n          n = this._actionsContainer,\n          s = this.getActions(t),\n          r = s.length;\n\n      for (i = 0, o = this._actionButtons.length; i < o; i++) this._disposeButton(this._actionButtons[i].button, this._actionButtons[i].callback);\n\n      for (this._actionButtons = []; n.firstChild;) n.removeChild(n.firstChild);\n\n      for (var l = 0; l < r; l++) \"enabled\" in s[l] && !s[l].enabled || (e = L.DomUtil.create(\"li\", \"\", n), a = this._createButton({\n        title: s[l].title,\n        text: s[l].text,\n        container: e,\n        callback: s[l].callback,\n        context: s[l].context\n      }), this._actionButtons.push({\n        button: a,\n        callback: s[l].callback\n      }));\n    },\n    _showActionsToolbar: function () {\n      var t = this._activeMode.buttonIndex,\n          e = this._lastButtonIndex,\n          i = this._activeMode.button.offsetTop - 1;\n      this._createActions(this._activeMode.handler), this._actionsContainer.style.top = i + \"px\", 0 === t && (L.DomUtil.addClass(this._toolbarContainer, \"leaflet-draw-toolbar-notop\"), L.DomUtil.addClass(this._actionsContainer, \"leaflet-draw-actions-top\")), t === e && (L.DomUtil.addClass(this._toolbarContainer, \"leaflet-draw-toolbar-nobottom\"), L.DomUtil.addClass(this._actionsContainer, \"leaflet-draw-actions-bottom\")), this._actionsContainer.style.display = \"block\", this._map.fire(L.Draw.Event.TOOLBAROPENED);\n    },\n    _hideActionsToolbar: function () {\n      this._actionsContainer.style.display = \"none\", L.DomUtil.removeClass(this._toolbarContainer, \"leaflet-draw-toolbar-notop\"), L.DomUtil.removeClass(this._toolbarContainer, \"leaflet-draw-toolbar-nobottom\"), L.DomUtil.removeClass(this._actionsContainer, \"leaflet-draw-actions-top\"), L.DomUtil.removeClass(this._actionsContainer, \"leaflet-draw-actions-bottom\"), this._map.fire(L.Draw.Event.TOOLBARCLOSED);\n    }\n  }), L.Draw = L.Draw || {}, L.Draw.Tooltip = L.Class.extend({\n    initialize: function (t) {\n      this._map = t, this._popupPane = t._panes.popupPane, this._visible = !1, this._container = t.options.drawControlTooltips ? L.DomUtil.create(\"div\", \"leaflet-draw-tooltip\", this._popupPane) : null, this._singleLineLabel = !1, this._map.on(\"mouseout\", this._onMouseOut, this);\n    },\n    dispose: function () {\n      this._map.off(\"mouseout\", this._onMouseOut, this), this._container && (this._popupPane.removeChild(this._container), this._container = null);\n    },\n    updateContent: function (t) {\n      return this._container ? (t.subtext = t.subtext || \"\", 0 !== t.subtext.length || this._singleLineLabel ? t.subtext.length > 0 && this._singleLineLabel && (L.DomUtil.removeClass(this._container, \"leaflet-draw-tooltip-single\"), this._singleLineLabel = !1) : (L.DomUtil.addClass(this._container, \"leaflet-draw-tooltip-single\"), this._singleLineLabel = !0), this._container.innerHTML = (t.subtext.length > 0 ? '<span class=\"leaflet-draw-tooltip-subtext\">' + t.subtext + \"</span><br />\" : \"\") + \"<span>\" + t.text + \"</span>\", t.text || t.subtext ? (this._visible = !0, this._container.style.visibility = \"inherit\") : (this._visible = !1, this._container.style.visibility = \"hidden\"), this) : this;\n    },\n    updatePosition: function (t) {\n      var e = this._map.latLngToLayerPoint(t),\n          i = this._container;\n\n      return this._container && (this._visible && (i.style.visibility = \"inherit\"), L.DomUtil.setPosition(i, e)), this;\n    },\n    showAsError: function () {\n      return this._container && L.DomUtil.addClass(this._container, \"leaflet-error-draw-tooltip\"), this;\n    },\n    removeError: function () {\n      return this._container && L.DomUtil.removeClass(this._container, \"leaflet-error-draw-tooltip\"), this;\n    },\n    _onMouseOut: function () {\n      this._container && (this._container.style.visibility = \"hidden\");\n    }\n  }), L.DrawToolbar = L.Toolbar.extend({\n    statics: {\n      TYPE: \"draw\"\n    },\n    options: {\n      polyline: {},\n      polygon: {},\n      rectangle: {},\n      circle: {},\n      marker: {},\n      circlemarker: {}\n    },\n    initialize: function (t) {\n      for (var e in this.options) this.options.hasOwnProperty(e) && t[e] && (t[e] = L.extend({}, this.options[e], t[e]));\n\n      this._toolbarClass = \"leaflet-draw-draw\", L.Toolbar.prototype.initialize.call(this, t);\n    },\n    getModeHandlers: function (t) {\n      return [{\n        enabled: this.options.polyline,\n        handler: new L.Draw.Polyline(t, this.options.polyline),\n        title: L.drawLocal.draw.toolbar.buttons.polyline\n      }, {\n        enabled: this.options.polygon,\n        handler: new L.Draw.Polygon(t, this.options.polygon),\n        title: L.drawLocal.draw.toolbar.buttons.polygon\n      }, {\n        enabled: this.options.rectangle,\n        handler: new L.Draw.Rectangle(t, this.options.rectangle),\n        title: L.drawLocal.draw.toolbar.buttons.rectangle\n      }, {\n        enabled: this.options.circle,\n        handler: new L.Draw.Circle(t, this.options.circle),\n        title: L.drawLocal.draw.toolbar.buttons.circle\n      }, {\n        enabled: this.options.marker,\n        handler: new L.Draw.Marker(t, this.options.marker),\n        title: L.drawLocal.draw.toolbar.buttons.marker\n      }, {\n        enabled: this.options.circlemarker,\n        handler: new L.Draw.CircleMarker(t, this.options.circlemarker),\n        title: L.drawLocal.draw.toolbar.buttons.circlemarker\n      }];\n    },\n    getActions: function (t) {\n      return [{\n        enabled: t.completeShape,\n        title: L.drawLocal.draw.toolbar.finish.title,\n        text: L.drawLocal.draw.toolbar.finish.text,\n        callback: t.completeShape,\n        context: t\n      }, {\n        enabled: t.deleteLastVertex,\n        title: L.drawLocal.draw.toolbar.undo.title,\n        text: L.drawLocal.draw.toolbar.undo.text,\n        callback: t.deleteLastVertex,\n        context: t\n      }, {\n        title: L.drawLocal.draw.toolbar.actions.title,\n        text: L.drawLocal.draw.toolbar.actions.text,\n        callback: this.disable,\n        context: this\n      }];\n    },\n    setOptions: function (t) {\n      L.setOptions(this, t);\n\n      for (var e in this._modes) this._modes.hasOwnProperty(e) && t.hasOwnProperty(e) && this._modes[e].handler.setOptions(t[e]);\n    }\n  }), L.EditToolbar = L.Toolbar.extend({\n    statics: {\n      TYPE: \"edit\"\n    },\n    options: {\n      edit: {\n        selectedPathOptions: {\n          dashArray: \"10, 10\",\n          fill: !0,\n          fillColor: \"#fe57a1\",\n          fillOpacity: .1,\n          maintainColor: !1\n        }\n      },\n      remove: {},\n      poly: null,\n      featureGroup: null\n    },\n    initialize: function (t) {\n      t.edit && (void 0 === t.edit.selectedPathOptions && (t.edit.selectedPathOptions = this.options.edit.selectedPathOptions), t.edit.selectedPathOptions = L.extend({}, this.options.edit.selectedPathOptions, t.edit.selectedPathOptions)), t.remove && (t.remove = L.extend({}, this.options.remove, t.remove)), t.poly && (t.poly = L.extend({}, this.options.poly, t.poly)), this._toolbarClass = \"leaflet-draw-edit\", L.Toolbar.prototype.initialize.call(this, t), this._selectedFeatureCount = 0;\n    },\n    getModeHandlers: function (t) {\n      var e = this.options.featureGroup;\n      return [{\n        enabled: this.options.edit,\n        handler: new L.EditToolbar.Edit(t, {\n          featureGroup: e,\n          selectedPathOptions: this.options.edit.selectedPathOptions,\n          poly: this.options.poly\n        }),\n        title: L.drawLocal.edit.toolbar.buttons.edit\n      }, {\n        enabled: this.options.remove,\n        handler: new L.EditToolbar.Delete(t, {\n          featureGroup: e\n        }),\n        title: L.drawLocal.edit.toolbar.buttons.remove\n      }];\n    },\n    getActions: function (t) {\n      var e = [{\n        title: L.drawLocal.edit.toolbar.actions.save.title,\n        text: L.drawLocal.edit.toolbar.actions.save.text,\n        callback: this._save,\n        context: this\n      }, {\n        title: L.drawLocal.edit.toolbar.actions.cancel.title,\n        text: L.drawLocal.edit.toolbar.actions.cancel.text,\n        callback: this.disable,\n        context: this\n      }];\n      return t.removeAllLayers && e.push({\n        title: L.drawLocal.edit.toolbar.actions.clearAll.title,\n        text: L.drawLocal.edit.toolbar.actions.clearAll.text,\n        callback: this._clearAllLayers,\n        context: this\n      }), e;\n    },\n    addToolbar: function (t) {\n      var e = L.Toolbar.prototype.addToolbar.call(this, t);\n      return this._checkDisabled(), this.options.featureGroup.on(\"layeradd layerremove\", this._checkDisabled, this), e;\n    },\n    removeToolbar: function () {\n      this.options.featureGroup.off(\"layeradd layerremove\", this._checkDisabled, this), L.Toolbar.prototype.removeToolbar.call(this);\n    },\n    disable: function () {\n      this.enabled() && (this._activeMode.handler.revertLayers(), L.Toolbar.prototype.disable.call(this));\n    },\n    _save: function () {\n      this._activeMode.handler.save(), this._activeMode && this._activeMode.handler.disable();\n    },\n    _clearAllLayers: function () {\n      this._activeMode.handler.removeAllLayers(), this._activeMode && this._activeMode.handler.disable();\n    },\n    _checkDisabled: function () {\n      var t,\n          e = this.options.featureGroup,\n          i = 0 !== e.getLayers().length;\n      this.options.edit && (t = this._modes[L.EditToolbar.Edit.TYPE].button, i ? L.DomUtil.removeClass(t, \"leaflet-disabled\") : L.DomUtil.addClass(t, \"leaflet-disabled\"), t.setAttribute(\"title\", i ? L.drawLocal.edit.toolbar.buttons.edit : L.drawLocal.edit.toolbar.buttons.editDisabled)), this.options.remove && (t = this._modes[L.EditToolbar.Delete.TYPE].button, i ? L.DomUtil.removeClass(t, \"leaflet-disabled\") : L.DomUtil.addClass(t, \"leaflet-disabled\"), t.setAttribute(\"title\", i ? L.drawLocal.edit.toolbar.buttons.remove : L.drawLocal.edit.toolbar.buttons.removeDisabled));\n    }\n  }), L.EditToolbar.Edit = L.Handler.extend({\n    statics: {\n      TYPE: \"edit\"\n    },\n    initialize: function (t, e) {\n      if (L.Handler.prototype.initialize.call(this, t), L.setOptions(this, e), this._featureGroup = e.featureGroup, !(this._featureGroup instanceof L.FeatureGroup)) throw new Error(\"options.featureGroup must be a L.FeatureGroup\");\n      this._uneditedLayerProps = {}, this.type = L.EditToolbar.Edit.TYPE;\n      var i = L.version.split(\".\");\n      1 === parseInt(i[0], 10) && parseInt(i[1], 10) >= 2 ? L.EditToolbar.Edit.include(L.Evented.prototype) : L.EditToolbar.Edit.include(L.Mixin.Events);\n    },\n    enable: function () {\n      !this._enabled && this._hasAvailableLayers() && (this.fire(\"enabled\", {\n        handler: this.type\n      }), this._map.fire(L.Draw.Event.EDITSTART, {\n        handler: this.type\n      }), L.Handler.prototype.enable.call(this), this._featureGroup.on(\"layeradd\", this._enableLayerEdit, this).on(\"layerremove\", this._disableLayerEdit, this));\n    },\n    disable: function () {\n      this._enabled && (this._featureGroup.off(\"layeradd\", this._enableLayerEdit, this).off(\"layerremove\", this._disableLayerEdit, this), L.Handler.prototype.disable.call(this), this._map.fire(L.Draw.Event.EDITSTOP, {\n        handler: this.type\n      }), this.fire(\"disabled\", {\n        handler: this.type\n      }));\n    },\n    addHooks: function () {\n      var t = this._map;\n      t && (t.getContainer().focus(), this._featureGroup.eachLayer(this._enableLayerEdit, this), this._tooltip = new L.Draw.Tooltip(this._map), this._tooltip.updateContent({\n        text: L.drawLocal.edit.handlers.edit.tooltip.text,\n        subtext: L.drawLocal.edit.handlers.edit.tooltip.subtext\n      }), t._editTooltip = this._tooltip, this._updateTooltip(), this._map.on(\"mousemove\", this._onMouseMove, this).on(\"touchmove\", this._onMouseMove, this).on(\"MSPointerMove\", this._onMouseMove, this).on(L.Draw.Event.EDITVERTEX, this._updateTooltip, this));\n    },\n    removeHooks: function () {\n      this._map && (this._featureGroup.eachLayer(this._disableLayerEdit, this), this._uneditedLayerProps = {}, this._tooltip.dispose(), this._tooltip = null, this._map.off(\"mousemove\", this._onMouseMove, this).off(\"touchmove\", this._onMouseMove, this).off(\"MSPointerMove\", this._onMouseMove, this).off(L.Draw.Event.EDITVERTEX, this._updateTooltip, this));\n    },\n    revertLayers: function () {\n      this._featureGroup.eachLayer(function (t) {\n        this._revertLayer(t);\n      }, this);\n    },\n    save: function () {\n      var t = new L.LayerGroup();\n      this._featureGroup.eachLayer(function (e) {\n        e.edited && (t.addLayer(e), e.edited = !1);\n      }), this._map.fire(L.Draw.Event.EDITED, {\n        layers: t\n      });\n    },\n    _backupLayer: function (t) {\n      var e = L.Util.stamp(t);\n      this._uneditedLayerProps[e] || (t instanceof L.Polyline || t instanceof L.Polygon || t instanceof L.Rectangle ? this._uneditedLayerProps[e] = {\n        latlngs: L.LatLngUtil.cloneLatLngs(t.getLatLngs())\n      } : t instanceof L.Circle ? this._uneditedLayerProps[e] = {\n        latlng: L.LatLngUtil.cloneLatLng(t.getLatLng()),\n        radius: t.getRadius()\n      } : (t instanceof L.Marker || t instanceof L.CircleMarker) && (this._uneditedLayerProps[e] = {\n        latlng: L.LatLngUtil.cloneLatLng(t.getLatLng())\n      }));\n    },\n    _getTooltipText: function () {\n      return {\n        text: L.drawLocal.edit.handlers.edit.tooltip.text,\n        subtext: L.drawLocal.edit.handlers.edit.tooltip.subtext\n      };\n    },\n    _updateTooltip: function () {\n      this._tooltip.updateContent(this._getTooltipText());\n    },\n    _revertLayer: function (t) {\n      var e = L.Util.stamp(t);\n      t.edited = !1, this._uneditedLayerProps.hasOwnProperty(e) && (t instanceof L.Polyline || t instanceof L.Polygon || t instanceof L.Rectangle ? t.setLatLngs(this._uneditedLayerProps[e].latlngs) : t instanceof L.Circle ? (t.setLatLng(this._uneditedLayerProps[e].latlng), t.setRadius(this._uneditedLayerProps[e].radius)) : (t instanceof L.Marker || t instanceof L.CircleMarker) && t.setLatLng(this._uneditedLayerProps[e].latlng), t.fire(\"revert-edited\", {\n        layer: t\n      }));\n    },\n    _enableLayerEdit: function (t) {\n      var e,\n          i,\n          o = t.layer || t.target || t;\n      this._backupLayer(o), this.options.poly && (i = L.Util.extend({}, this.options.poly), o.options.poly = i), this.options.selectedPathOptions && (e = L.Util.extend({}, this.options.selectedPathOptions), e.maintainColor && (e.color = o.options.color, e.fillColor = o.options.fillColor), o.options.original = L.extend({}, o.options), o.options.editing = e), o instanceof L.Marker ? (o.editing && o.editing.enable(), o.dragging.enable(), o.on(\"dragend\", this._onMarkerDragEnd).on(\"touchmove\", this._onTouchMove, this).on(\"MSPointerMove\", this._onTouchMove, this).on(\"touchend\", this._onMarkerDragEnd, this).on(\"MSPointerUp\", this._onMarkerDragEnd, this)) : o.editing.enable();\n    },\n    _disableLayerEdit: function (t) {\n      var e = t.layer || t.target || t;\n      e.edited = !1, e.editing && e.editing.disable(), delete e.options.editing, delete e.options.original, this._selectedPathOptions && (e instanceof L.Marker ? this._toggleMarkerHighlight(e) : (e.setStyle(e.options.previousOptions), delete e.options.previousOptions)), e instanceof L.Marker ? (e.dragging.disable(), e.off(\"dragend\", this._onMarkerDragEnd, this).off(\"touchmove\", this._onTouchMove, this).off(\"MSPointerMove\", this._onTouchMove, this).off(\"touchend\", this._onMarkerDragEnd, this).off(\"MSPointerUp\", this._onMarkerDragEnd, this)) : e.editing.disable();\n    },\n    _onMouseMove: function (t) {\n      this._tooltip.updatePosition(t.latlng);\n    },\n    _onMarkerDragEnd: function (t) {\n      var e = t.target;\n      e.edited = !0, this._map.fire(L.Draw.Event.EDITMOVE, {\n        layer: e\n      });\n    },\n    _onTouchMove: function (t) {\n      var e = t.originalEvent.changedTouches[0],\n          i = this._map.mouseEventToLayerPoint(e),\n          o = this._map.layerPointToLatLng(i);\n\n      t.target.setLatLng(o);\n    },\n    _hasAvailableLayers: function () {\n      return 0 !== this._featureGroup.getLayers().length;\n    }\n  }), L.EditToolbar.Delete = L.Handler.extend({\n    statics: {\n      TYPE: \"remove\"\n    },\n    initialize: function (t, e) {\n      if (L.Handler.prototype.initialize.call(this, t), L.Util.setOptions(this, e), this._deletableLayers = this.options.featureGroup, !(this._deletableLayers instanceof L.FeatureGroup)) throw new Error(\"options.featureGroup must be a L.FeatureGroup\");\n      this.type = L.EditToolbar.Delete.TYPE;\n      var i = L.version.split(\".\");\n      1 === parseInt(i[0], 10) && parseInt(i[1], 10) >= 2 ? L.EditToolbar.Delete.include(L.Evented.prototype) : L.EditToolbar.Delete.include(L.Mixin.Events);\n    },\n    enable: function () {\n      !this._enabled && this._hasAvailableLayers() && (this.fire(\"enabled\", {\n        handler: this.type\n      }), this._map.fire(L.Draw.Event.DELETESTART, {\n        handler: this.type\n      }), L.Handler.prototype.enable.call(this), this._deletableLayers.on(\"layeradd\", this._enableLayerDelete, this).on(\"layerremove\", this._disableLayerDelete, this));\n    },\n    disable: function () {\n      this._enabled && (this._deletableLayers.off(\"layeradd\", this._enableLayerDelete, this).off(\"layerremove\", this._disableLayerDelete, this), L.Handler.prototype.disable.call(this), this._map.fire(L.Draw.Event.DELETESTOP, {\n        handler: this.type\n      }), this.fire(\"disabled\", {\n        handler: this.type\n      }));\n    },\n    addHooks: function () {\n      var t = this._map;\n      t && (t.getContainer().focus(), this._deletableLayers.eachLayer(this._enableLayerDelete, this), this._deletedLayers = new L.LayerGroup(), this._tooltip = new L.Draw.Tooltip(this._map), this._tooltip.updateContent({\n        text: L.drawLocal.edit.handlers.remove.tooltip.text\n      }), this._map.on(\"mousemove\", this._onMouseMove, this));\n    },\n    removeHooks: function () {\n      this._map && (this._deletableLayers.eachLayer(this._disableLayerDelete, this), this._deletedLayers = null, this._tooltip.dispose(), this._tooltip = null, this._map.off(\"mousemove\", this._onMouseMove, this));\n    },\n    revertLayers: function () {\n      this._deletedLayers.eachLayer(function (t) {\n        this._deletableLayers.addLayer(t), t.fire(\"revert-deleted\", {\n          layer: t\n        });\n      }, this);\n    },\n    save: function () {\n      this._map.fire(L.Draw.Event.DELETED, {\n        layers: this._deletedLayers\n      });\n    },\n    removeAllLayers: function () {\n      this._deletableLayers.eachLayer(function (t) {\n        this._removeLayer({\n          layer: t\n        });\n      }, this), this.save();\n    },\n    _enableLayerDelete: function (t) {\n      (t.layer || t.target || t).on(\"click\", this._removeLayer, this);\n    },\n    _disableLayerDelete: function (t) {\n      var e = t.layer || t.target || t;\n      e.off(\"click\", this._removeLayer, this), this._deletedLayers.removeLayer(e);\n    },\n    _removeLayer: function (t) {\n      var e = t.layer || t.target || t;\n      this._deletableLayers.removeLayer(e), this._deletedLayers.addLayer(e), e.fire(\"deleted\");\n    },\n    _onMouseMove: function (t) {\n      this._tooltip.updatePosition(t.latlng);\n    },\n    _hasAvailableLayers: function () {\n      return 0 !== this._deletableLayers.getLayers().length;\n    }\n  });\n}(window, document);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/leaflet-draw/dist/leaflet.draw.js\n");

/***/ })

}]);